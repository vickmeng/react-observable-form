var e=Object.defineProperty,t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable,a=(t,n,r)=>n in t?e(t,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[n]=r,l=(e,l)=>{for(var o in l||(l={}))n.call(l,o)&&a(e,o,l[o]);if(t)for(var o of t(l))r.call(l,o)&&a(e,o,l[o]);return e};import{S as o,l as s,t as i,r as c,R as u,F as m,I as p,T as d,m as h,s as E,a as v,b,c as g,d as C,e as f,L as F,f as y,h as x,g as V,i as w,j as R,k as G,n as k,o as T,p as j,C as S,q as P,u as N,v as L,w as $,x as _,B as D,A as O,y as B,z as A,P as q,D as W,E as M,G as H,H as I,J as U,K as J,M as z,N as K,O as Q,Q as X,U as Y,V as Z,W as ee}from"./vendor.d6cde766.js";class te{constructor(){this.valueSubject$=new o,this.disabledSubject$=new o,this.validSubject$=new o,this.dirtySubject$=new o,this.errorsSubject$=new o,this.destroy$=new o,this.destroy=()=>{this.destroy$.next(!0)},this.setErrors=e=>{s.exports.isEqual(e,this.errors)||this.errorsSubject$.next(e)},this.setValidators=e=>{this._validators=e,this.validateAndUpdateErrors()},this.disable=()=>{this.setDisabled(!0)},this.enable=()=>{this.setDisabled(!1)},this.setValid=e=>{e!==this.valid&&this.validSubject$.next(e)},this.markAsDirty=()=>{this.setDirty(!0)},this.markAsPristine=()=>{this.setDirty(!1)},this.initValue=e=>{this.updatePrivateValue(e)},this.initDisabled=e=>{this._disabled=e},this.initDirty=e=>{this._dirty=e},this.initErrors=e=>{this._errors=e},this.initValid=e=>{this._valid=e},this.initValidators=e=>{this._validators=e},this.updatePrivateValue=e=>{this._value=e},this.updatePrivateValid=e=>{this._valid=e},this.updatePrivateErrors=e=>{this._errors=e},this.updatePrivateDisabled=e=>{this._disabled=e},this.updatePrivateDirty=e=>{this._dirty=e},this.validateAndUpdateErrors=()=>{const e=re(this,this._validators);this.setErrors(e),this.setValid(this.checkValid())},this.setDisabled=e=>{e!==this.disabled&&this.disabledSubject$.next(e)},this.setDirty=e=>{e!==this.dirty&&this.dirtySubject$.next(e)}}get value(){return this._value}get errors(){return this._errors}get valid(){return this._valid}get invalid(){return!this._valid}get disabled(){return this._disabled}get enabled(){return!this._disabled}get dirty(){return this._dirty}get pristine(){return!this._dirty}get valueChange(){return this.valueSubject$.asObservable().pipe(i(this.destroy$))}get errorsChange(){return this.errorsSubject$.asObservable().pipe(i(this.destroy$))}get disabledChange(){return this.disabledSubject$.asObservable().pipe(i(this.destroy$))}get dirtyChange(){return this.dirtySubject$.asObservable().pipe(i(this.destroy$))}get validChange(){return this.validSubject$.asObservable().pipe(i(this.destroy$))}initBasicParams(e,{disabled:t=!1,dirty:n=!1,validators:r=[],autoMarkAsDirty:a=!0}){this.initValue(e),this.initValidators(r),this.initDisabled(t),this.initDirty(n),this.initErrors(re(this,r)),this.initValid(this.checkValid()),this.validChange.subscribe(this.updatePrivateValid),this.errorsChange.subscribe(this.updatePrivateErrors),this.disabledChange.subscribe(this.updatePrivateDisabled),this.dirtyChange.subscribe(this.updatePrivateDirty),this.valueChange.subscribe(this.updatePrivateValue),this.valueChange.subscribe(this.validateAndUpdateErrors),a&&this.valueChange.subscribe(this.markAsDirty)}}class ne extends te{constructor(e,t={}){super(),this.setValue=e=>{e!==this.value&&this.valueSubject$.next(e)},this.checkValid=()=>!this.errors,this.initBasicParams(e,t)}}const re=(e,t)=>{const n=t.reduce(((t,n)=>{const r=n(e);return r&&(t=l(l({},t),r)),t}),{});return s.exports.isEmpty(n)?null:n},ae=e=>e instanceof te?e:new ne(...e),le=(e,t)=>{const n=c.exports.useRef(!1);c.exports.useEffect((()=>{if(n.current)return e();n.current=!0}),t)},oe=e=>{const[t,n]=c.exports.useState(e.value);return c.exports.useEffect((()=>{const t=e.valueChange.subscribe(n);return()=>{t.unsubscribe()}}),[e]),le((()=>{n(e.value)}),[e]),t},se=e=>{const[t,n]=c.exports.useState(e.disabled);return c.exports.useEffect((()=>{const t=e.disabledChange.subscribe(n);return()=>{t.unsubscribe()}}),[e]),le((()=>{n(e.disabled)}),[e]),t},ie=e=>{const[t,n]=c.exports.useState(e.dirty);return c.exports.useEffect((()=>{const t=e.dirtyChange.subscribe(n);return()=>{t.unsubscribe()}}),[e]),le((()=>{n(e.dirty)}),[e]),t},ce=e=>{const[t,n]=c.exports.useState(e.valid);return c.exports.useEffect((()=>{const t=e.validChange.subscribe(n);return()=>{t.unsubscribe()}}),[e]),le((()=>{n(e.valid)}),[e]),t},ue=e=>{const[t,n]=c.exports.useState(e.errors);return c.exports.useEffect((()=>{const t=e.errorsChange.subscribe(n);return()=>{t.unsubscribe()}}),[e]),le((()=>{n(e.errors)}),[e]),t},me=e=>{const[t,n]=c.exports.useState(e.controls);return c.exports.useEffect((()=>{const t=e.controlsChange.subscribe(n);return()=>{t.unsubscribe()}}),[e]),le((()=>{n(e.controls)}),[e]),t},pe=u.createContext(null);function de(e){const{children:t}=e,n=c.exports.useContext(pe),{name:r,control:a}=function(e){return void 0!==e.name}(e)?{name:e.name,control:n.get(e.name)}:{control:e.control};if(!(a instanceof ne))throw new Error("props error:Field can only receive FieldControl as control");const l=oe(a),o=se(a),s=ie(a),i=ce(a),u=ue(a);return t({name:r,value:l,setValue:a.setValue,markAsDirty:a.markAsDirty,markAsPristine:a.markAsPristine,errors:u,disabled:o,enabled:!o,valid:i,invalid:!i,dirty:s,pristine:!s})}const he=()=>{const e=c.exports.useRef(new ne(""));return u.createElement(de,{control:e.current},(({value:e,setValue:t})=>u.createElement(m.Item,{label:"Ant Design"},u.createElement(p,{value:e,onChange:e=>t(e.target.value)}))))},Ee=()=>{const e=c.exports.useRef(new ne(""));return u.createElement(de,{control:e.current},(({value:e,setValue:t})=>u.createElement(d,{label:"material-ui",value:e,onChange:e=>t(e.target.value)})))};class ve extends te{constructor(e,t={}){super(),this.controlsSubject=new o,this.controlsChangeNotifyLock=!1,this.get=e=>this._controls[e],this.setValue=e=>{e!==this.value&&(this.setValueToControls(e),this.valueSubject$.next(e))},this.add=(e,t)=>{if(this.controls[e])return void console.warn(`already has control named ${e} in formGroup`);const n=Object.assign({},this.controls,{[e]:ae(t)});this.controlsSubject.next(n)},this.remove=e=>{if(!this.controls[e])return void console.warn(`cannot find control named ${e} in formGroup`);const t=Object.assign({},this.controls);delete t[e],this.controlsSubject.next(t)},this.checkValid=()=>!(this.errors||Object.values(this._controls).some((e=>e.invalid))),this.initControls=e=>{const t={};for(const n in e)if(Object.prototype.hasOwnProperty.call(e,n)){const r=e[n];t[n]=ae(r)}this._controls=t},this.setValueToControls=e=>{this.controlsChangeNotifyLock=!0,Object.keys(this._controls).forEach((t=>{const n=Object.prototype.hasOwnProperty.call(e,t);this._controls[t].setValue(n?e[t]:null)})),this.controlsChangeNotifyLock=!1},this.updatePrivateControlsAndResetSubscribeGraph=e=>{this.updatePrivateControls(e),this.valueSubject$.next(this.getGroupValueFromControls()),this.resetGraph()},this.updatePrivateControls=e=>{this._controls=e},this.getGroupValueFromControls=()=>{const e={};return Object.keys(this._controls).forEach((t=>{const n=this._controls[t];n.enabled&&(e[t]=n.value)})),e},this.resetGraph=()=>{const e=Object.values(this._controls),t=e.map((e=>e.valueChange)),n=e.map((e=>e.validChange)),r=e.map((e=>e.disabledChange));this.resetValueGraph([...t,...r]),this.resetValidGraph(n)},this.resetValidGraph=e=>{this.validChangesSubscription&&this.validChangesSubscription.unsubscribe(),this.validChangesSubscription=h(...e).pipe(i(this.destroy$),E((()=>this.controlsChangeNotifyLock)),v((()=>this.checkValid()))).subscribe(this.setValid)},this.initControls(e),this.initBasicParams(this.getGroupValueFromControls(),t),this.resetGraph(),this.controlsChange.subscribe(this.updatePrivateControlsAndResetSubscribeGraph)}get controls(){return this._controls}get controlsChange(){return this.controlsSubject.asObservable().pipe(i(this.destroy$))}resetValueGraph(e){this.valueChangesSubscription&&this.valueChangesSubscription.unsubscribe(),this.valueChangesSubscription=h(...e).pipe(i(this.destroy$),E((()=>this.controlsChangeNotifyLock)),v((()=>this.getGroupValueFromControls()))).subscribe((e=>{this.valueSubject$.next(e)}))}}const be=e=>{const{children:t}=e,n=c.exports.useContext(pe),{name:r,control:a}=(e=>void 0!==e.name)(e)?{name:e.name,control:n.get(e.name)}:{control:e.control},l=oe(a),o=se(a),s=ie(a),i=ce(a),m={name:r,value:l,disabled:o,enabled:!o,errors:ue(a),valid:i,invalid:!i,dirty:s,pristine:!s,controls:me(a)};return u.createElement(pe.Provider,{value:a},t(m))},ge=new ve({married:["unmarried"],spouse:["",{disabled:!0}]}),Ce=ge.get("married"),fe=ge.get("spouse");Ce.valueChange.subscribe((e=>{"married"===e?fe.enable():(fe.setValue(""),fe.disable())}));const Fe=()=>u.createElement(be,{control:ge},(()=>u.createElement(u.Fragment,null,u.createElement(b,{component:"legend"},"婚姻状况"),u.createElement(de,{name:"married"},(({value:e,setValue:t})=>u.createElement(u.Fragment,null,u.createElement(g,{value:e,onChange:e=>{t(e.target.value)}},u.createElement(C,{value:"unmarried",control:u.createElement(f,null),label:"未婚"}),u.createElement(C,{value:"married",control:u.createElement(f,null),label:"已婚"}))))),u.createElement("br",null),u.createElement(de,{name:"spouse"},(({value:e,setValue:t,disabled:n})=>u.createElement(d,{label:"配偶姓名",disabled:n,value:e,onChange:e=>t(e.target.value)}))))));const ye=()=>u.createElement("main",{className:"home"},u.createElement("div",{className:"banner"},u.createElement("img",{src:"/react-observable-form/assets/rx.18995810.png",className:"rxImg"}),u.createElement("img",{src:"/react-observable-form/assets/react.7f55f92c.svg",className:"reactImg"}),u.createElement("nav",null,u.createElement("div",null,u.createElement(F,{className:"link",to:"/quick-start"},"文档"),u.createElement(F,{className:"link",to:"/"},"示例")),u.createElement("div",null,u.createElement("a",{href:"https://github.com/vickmeng/react-observable-form"},u.createElement(y,null)))),u.createElement("h1",null,"React Observable Form"),u.createElement("h2",null,"可自由订阅状态变化的React响应式表单方案"),u.createElement("div",null,u.createElement(F,{className:"quick-start link",to:"/quick-start"},"快速开始"))),u.createElement("section",null,u.createElement("h2",null,"自由订阅"),u.createElement("p",null,"随时随处订阅表单元素状态变化"),u.createElement("img",{src:"/react-observable-form/assets/flow.1c028861.png",width:500})),u.createElement("section",null,u.createElement("h2",null,"Rxjs"),u.createElement("p",null,"可以使用Rxjs Operators助力开发"),u.createElement("img",{src:"/react-observable-form/assets/pipe.1ccef1fe.png",width:600})),u.createElement("section",null,u.createElement("h2",null,"友好集成"),u.createElement("p",null,"自由对接流行的组件库"),u.createElement("div",{className:"third"},u.createElement("div",{className:"third--demo antd"},u.createElement(he,null)),u.createElement("div",{className:"divide vertical"}),u.createElement("div",{className:"third--demo mui"},u.createElement(Ee,null)))),u.createElement("section",null,u.createElement("h2",null,"集中管理"),u.createElement("p",null,"声明式表单，集中管理动态逻辑"),u.createElement("div",{className:"declare"},u.createElement("div",{className:"code"},u.createElement(x,{language:"javascript",style:V},'const group = new GroupControl({\n  married: ["unmarried"],\n  spouse: ["", { disabled: true }],\n});\n\nconst married = group.get("married");\nconst spouse = group.get("spouse");\n\nmarried.valueChange.subscribe((v) => {\n  if (v === "married") {\n    spouse.enable();\n  } else {\n    spouse.setValue("");\n    spouse.disable();\n  }\n});')),u.createElement("div",{className:"demo"},u.createElement(Fe,null)))),u.createElement("footer",null,"遵循 MIT 开源协议    Copyright © Rxjs-CN")),xe=()=>u.createElement("div",{className:"page"},u.createElement(w,{paragraph:!0,variant:"h2"},"快速开始"),u.createElement(w,{paragraph:!0,variant:"h4"},"环境准备"),u.createElement(w,{paragraph:!0},"请确保使用 v16.8及更高版本的react"),u.createElement(w,{paragraph:!0,variant:"h4"},"安装"),u.createElement(x,{language:"javascript",style:V},"yarn add rxjs react-observable-form\n\nor\n\nnpm install rxjs react-observable-form"));const Ve={title:"基础使用",routes:[{text:"单一元素",link:"/field"},{text:"群组",link:"/group"},{text:"列表",link:"/list"},{text:"校验",link:"/validate"}]},we={title:"高级使用",routes:[{text:"订阅变化",link:"/subscribe"},{text:"动态表单",link:"/dynamic"},{text:"联合校验",link:"/uniteValidate"},{text:"复杂嵌套",link:"/nest"},{text:"与Rxjs",link:"/useRx"}]},Re={title:"API",routes:[{text:"<Field/>",link:"fieldApi"},{text:"<Group/>",link:""},{text:"<List/>",link:""},{text:"<Error/>",link:""},{text:"FieldControl",link:""},{text:"GroupControl",link:""},{text:"ListControl",link:""}]},Ge=({menu:e})=>{const[t,n]=c.exports.useState(!1);return u.createElement(u.Fragment,null,u.createElement(G,{button:!0,onClick:()=>{n(!t)}},u.createElement(k,{primary:e.title}),t?u.createElement(T,null):u.createElement(j,null)),u.createElement(S,{in:t,timeout:"auto",unmountOnExit:!0},u.createElement(R,{component:"div",disablePadding:!0,className:"submenu--list"},e.routes.map((e=>u.createElement(F,{to:e.link,key:e.text},u.createElement(G,{button:!0,className:"nested"},u.createElement(k,{primary:e.text}))))))))},ke=()=>u.createElement("aside",{className:"menu"},u.createElement(R,{component:"nav","aria-labelledby":"nested-list-subheader"},u.createElement(F,{to:"/"},u.createElement(G,{button:!0},u.createElement(k,{primary:"首页"}))),u.createElement(F,{to:"/quick-start"},u.createElement(G,{button:!0},u.createElement(k,{primary:"快速开始"}))),u.createElement(F,{to:"/core"},u.createElement(G,{button:!0},u.createElement(k,{primary:"核心概念"}))),u.createElement(Ge,{menu:Ve}),u.createElement(Ge,{menu:we}),u.createElement(Ge,{menu:Re}),u.createElement(F,{to:"/resources"},u.createElement(G,{button:!0},u.createElement(k,{primary:"更多选择"}))))),Te=()=>u.createElement("div",{className:"page"},u.createElement(w,{paragraph:!0,variant:"h2"},"核心概念"),u.createElement(w,{paragraph:!0},"react-observable-form主要包含两个概念：Controller与Component。"),u.createElement(w,{paragraph:!0,variant:"h4"},"Controllers"),u.createElement(w,{paragraph:!0},"Controller是数据的源头，它为视图提供一系列可观察对象，以及操作数据的方法，使用者可以通过订阅这些可观察对象获得如：value，errors等状态。"),u.createElement(w,{paragraph:!0},"我们有如下三种class创建Controller："),u.createElement(w,{paragraph:!0},u.createElement("ul",null,u.createElement("li",null,"FieldControl：用以创建单一元素的控制器"),u.createElement("li",null,"GroupControl：用以创建群组元素的控制器"),u.createElement("li",null,"ListControl：用以创建列表元素的控制器"))),u.createElement(w,{paragraph:!0,variant:"h4"},"Components"),u.createElement(w,{paragraph:!0},"就是React组件，作为Controller的订阅者，可以获取其订阅的Controller的值向下传递，也提供方法让下级组件将状态上传，从而实现受控组件。"),u.createElement(w,{paragraph:!0},"我们有如下三种Components："),u.createElement(w,{paragraph:!0},u.createElement("ul",null,u.createElement("li",null," ","<Field/>","：FieldControl的订阅器"),u.createElement("li",null," ","<Group/>","：GroupControl的订阅器"),u.createElement("li",null," ","<List/>","：ListControl的订阅器"))),u.createElement("br",null),u.createElement(w,{paragraph:!0},"可以查看",u.createElement(F,{to:"/field"},"基础使用"),"更直观得进行学习")),je=({children:e})=>u.createElement(x,{language:"typescript",style:V},e),Se=e=>{const[t,n]=u.useState(!1);return u.createElement(P,null,u.createElement(N,null,e.demo),u.createElement(L,{disableSpacing:!0},u.createElement($,{onClick:()=>{n(!t)},"aria-expanded":t,"aria-label":"show more"},u.createElement(_,{color:t?"primary":"inherit"}))),u.createElement(S,{in:t,timeout:"auto",unmountOnExit:!0},u.createElement(N,null,u.createElement(je,null,e.code))))},Pe=()=>u.createElement("div",{className:"page"},u.createElement(w,{paragraph:!0,variant:"h2"},"单一元素"),u.createElement(w,{paragraph:!0},"我们用Field指代单一元素，它是最小的数据源。往往绑定一个单独的受控组件，比如一个输入框，一个树形选择器。"),u.createElement(w,{paragraph:!0},"首先，我们创建一个FieldController作为数据源。"),u.createElement(w,{paragraph:!0},"兵无常势，水无常形。",u.createElement("b",null,"你可以根据需要把FieldController放在任何一个可方便获取的位置,可以是组件外，","<Context/>","中，或者各种状态管理工具，但请避免重复创造实例。")," ","本例中我们放在useRef里。"),u.createElement(je,null,'const controlRef = useRef(new FieldControl<string>(""));'),u.createElement("br",null),u.createElement(w,{paragraph:!0},"FieldControl接受两个参数，第一个参数是默认值，第二个参数是其他初始化配置。可以在",u.createElement(F,{to:"/"},"API"),"中获取更多信息。接下来利用","<Field/>","订阅FieldController。"),u.createElement(je,null,"<Field control={controlRef.current}></Field>"),u.createElement("br",null),u.createElement(w,{paragraph:!0},"将FieldController传入","<Field/>","，","<Field/>","会在初始化时自动订阅FieldController的状态，同时在销毁时取消订阅。"),u.createElement(w,{paragraph:!0},"接下来，将","<Field/>","得到的数据传递给视图"),u.createElement(je,null,'<Field control={controlRef.current}>\n    {({ value, setValue }) => {\n        return <TextField label="material-ui" value={value} onChange={(e) => setValue(e.target.value)} />;\n    }}\n</Field>'),u.createElement("br",null),u.createElement(w,{paragraph:!0},"<Field/>","接受函数作为children，向下传递状态与控制状态的方法。本例将value传入给视图组件，并暴露setValue方法，提供修改value的能力。",u.createElement("b",null,"如果使用者觉得这个函数有些啰嗦，开发团队期待你使用如HOC等任何的编程技巧简化代码。")),u.createElement("br",null),u.createElement(w,{paragraph:!0},"本例采用material-ui作为视图库。完整代码如下："),u.createElement(Se,{code:'import { useRef } from "react";\nimport { TextField } from "@material-ui/core";\nimport { Field, FieldControl } from "react-observable-form";\n\nexport const BasicWithMui = () => {\n  const controlRef = useRef(new FieldControl<string>(""));\n\n  return (\n    <Field control={controlRef.current}>\n      {({ value, setValue }) => {\n        return <TextField label="material-ui" value={value} onChange={(e) => setValue(e.target.value)} />;\n      }}\n    </Field>\n  );\n};\n',demo:u.createElement(Ee,null)})),Ne=e=>{const{children:t}=e,n=c.exports.useContext(pe),{name:r,control:a}=(e=>void 0!==e.name)(e)?{name:e.name,control:n.get(e.name)}:{control:e.control},l=oe(a),o=se(a),s=ie(a),i=ce(a),m={name:r,value:l,disabled:o,enabled:!o,errors:ue(a),valid:i,invalid:!i,dirty:s,pristine:!s,controls:me(a)};return u.createElement(pe.Provider,{value:a},t(m))},Le=e=>{const{children:t}=e,n=c.exports.useContext(pe),{name:r,control:a}=function(e){return void 0!==e.name}(e)?{name:e.name,control:n.get(e.name)}:{control:e.control},l=ie(a);return t({name:r,errors:ue(a),dirty:l,pristine:!l})};class $e extends te{constructor(e,t={}){super(),this.controlsSubject=new o,this.controlsChangeNotifyLock=!1,this.get=e=>this._controls[+e],this.insert=(e,...t)=>{const n=[...this.controls],r=t.map((e=>ae(e)));n.splice(e,0,...r),this.controlsSubject.next(n)},this.push=(...e)=>{this.insert(this.controls.length,...e)},this.remove=(e,t=1)=>{const n=[...this.controls];n.splice(e,t),this.controlsSubject.next(n)},this.setValue=e=>{e!==this.value&&this.valueSubject$.next(e)},this.checkValid=()=>!(this.errors||this._controls.some((e=>e.invalid))),this.initControls=e=>{this._controls=e.map((e=>ae(e)))},this.updatePrivateControlsAndResetSubscribeGraph=e=>{this.updatePrivateControls(e),this.valueSubject$.next(this.getListValueFromControls()),this.resetGraph()},this.updatePrivateControls=e=>{this._controls=e},this.getListValueFromControls=()=>{const e=[];return Object.keys(this._controls).forEach(((t,n)=>{const r=this._controls[n];r.enabled&&(e[n]=r.value)})),e},this.resetGraph=()=>{const e=this._controls.map((e=>e.valueChange)),t=this._controls.map((e=>e.validChange)),n=this._controls.map((e=>e.disabledChange));this.resetValueGraph([...e,...n]),this.resetValidGraph(t)},this.resetValidGraph=e=>{this.validChangesSubscription&&this.validChangesSubscription.unsubscribe(),this.validChangesSubscription=h(...e).pipe(i(this.destroy$),E((()=>this.controlsChangeNotifyLock)),v((()=>this.checkValid()))).subscribe(this.setValid)},this.initControls(e),this.initBasicParams(this.getListValueFromControls(),t),this.resetGraph(),this.controlsChange.subscribe(this.updatePrivateControlsAndResetSubscribeGraph)}get controls(){return this._controls}get controlsChange(){return this.controlsSubject.asObservable().pipe(i(this.destroy$))}resetValueGraph(e){this.valueChangesSubscription&&this.valueChangesSubscription.unsubscribe(),this.valueChangesSubscription=h(...e).pipe(i(this.destroy$),E((()=>this.controlsChangeNotifyLock)),v((()=>this.getListValueFromControls()))).subscribe((e=>{this.valueSubject$.next(e)}))}}const _e=()=>{const e=c.exports.useRef(new ve({consignee:["Vick"],address:["No.1,Chaowai Street,Chaoyang District,Beijing City"]}));return c.exports.useEffect((()=>{const t=e.current.valueChange.subscribe((e=>{console.log("value changed",e)}));return()=>{t.unsubscribe()}}),[]),u.createElement(be,{control:e.current},(t=>u.createElement(u.Fragment,null,u.createElement(de,{name:"consignee"},(({value:e,setValue:t})=>u.createElement(d,{label:"consignee",variant:"outlined",value:e,onChange:e=>t(e.target.value)}))),u.createElement("br",null),u.createElement("br",null),u.createElement(de,{name:"address"},(({value:e,setValue:t})=>u.createElement(d,{label:"address",variant:"outlined",multiline:!0,maxRows:14,value:e,onChange:e=>t(e.target.value)}))),u.createElement("br",null),u.createElement("br",null),u.createElement(D,{variant:"contained",color:"primary",onClick:()=>{console.log(e.current.value)}},"在控制台中打印数据"))))},De=()=>u.createElement("div",{className:"page"},u.createElement(w,{paragraph:!0,variant:"h2"},"群组"),u.createElement(w,{paragraph:!0},"我们用Group指代群组，它是由name为key，以其他controller为value组成的hash型数据源，一张表单往往就是一个Group。"),u.createElement(w,{paragraph:!0},'我们现在创建一个包含"consignee"，"address"两个参数的群组。过程和创建单一元素是很接近的。'),u.createElement(w,{paragraph:!0},'首先，我们创造一个GroupController，其中包含"consignee"，"address"两个key，我们为这两个属性赋予两个FieldController, GroupController会自动订阅下级的Controllers:'),u.createElement(je,null,'  const groupControlRef = useRef(\n    new GroupControl({\n      consignee: new FieldControl("vick"),\n      address: new FieldControl("No.1,Chaowai Street,Chaoyang District,Beijing City"),\n    })\n  );'),u.createElement(w,{paragraph:!0},"也可以采用简写形式:"),u.createElement(je,null,' const groupControlRef = useRef(\n    new GroupControl({\n      consignee: ["vick"],\n      address: ["No.1,Chaowai Street,Chaoyang District,Beijing City"],\n    })\n  );'),u.createElement(w,{paragraph:!0},"然后，利用","<Group/>","订阅GroupController"),u.createElement(je,null,"<Group control={groupControlRef.current}>\n    {(props) => {\n        return (\n          <>\n             //TODO\n          </>\n        );\n      }}\n</Group>"),u.createElement(w,{paragraph:!0},"至此Group的工作完成，接下来要将Group的Controller与视图关联。 由于本例中的Group包含的Controller均为FieldController， 我们采用","<Field/>","与其匹配，更复杂的例子可在",u.createElement(F,{to:"/"},"高级使用"),"中查看"),u.createElement(w,{paragraph:!0},"<Field/>","可以通过name可以匹配外部GroupController的下级Controller"),u.createElement(je,null,'<Group control={groupControlRef.current}>\n      {(props) => {\n        return (\n          <>\n            <Field name="consignee">\n              {({ value, setValue }) => {\n                return (\n                  <TextField\n                    label="consignee"\n                    variant="outlined"\n                    value={value}\n                    onChange={(e) => setValue(e.target.value)}\n                  />\n                );\n              }}\n            </Field>\n\n            <br />\n            <br />\n\n            <Field name="address">\n              {({ value, setValue }) => {\n                return (\n                  <TextField\n                    label="address"\n                    variant="outlined"\n                    multiline\n                    maxRows={14}\n                    value={value}\n                    onChange={(e) => setValue(e.target.value)}\n                  />\n                );\n              }}\n            </Field>\n          </>\n        );\n      }}\n    </Group>'),u.createElement(je,null,'<Field name="consignee"/> 相当于 <Field control="一个FieldController"/>'),u.createElement(w,{paragraph:!0},"<Field/>","完整例子如下"),u.createElement(Se,{demo:u.createElement(_e,null),code:'import React, { useRef } from "react";\nimport { TextField } from "@material-ui/core";\nimport { Field, Group, GroupControl } from "react-observable-form";\n\nconst GroupDemo = () => {\n  // const groupControlRef = useRef(\n  //   new GroupControl({\n  //     consignee: new FieldControl("vick"),\n  //     address: new FieldControl("No.1,Chaowai Street,Chaoyang District,Beijing City"),\n  //   })\n  // );\n\n  const groupControlRef = useRef(\n    new GroupControl({\n      consignee: ["vick"],\n      address: ["No.1,Chaowai Street,Chaoyang District,Beijing City"],\n    })\n  );\n\n  return (\n    <Group control={groupControlRef.current}>\n      {(props) => {\n        return (\n          <>\n            <Field name="consignee">\n              {({ value, setValue }) => {\n                return (\n                  <TextField\n                    label="consignee"\n                    variant="outlined"\n                    value={value}\n                    onChange={(e) => setValue(e.target.value)}\n                  />\n                );\n              }}\n            </Field>\n\n            <Field name="address">\n              {({ value, setValue }) => {\n                return (\n                  <TextField\n                    label="address"\n                    variant="outlined"\n                    multiline\n                    maxRows={14}\n                    value={value}\n                    onChange={(e) => setValue(e.target.value)}\n                  />\n                );\n              }}\n            </Field>\n            <Button\n              variant="contained"\n              color={"primary"}\n              onClick={() => {\n                console.log(groupControlRef.current.value);\n              }}\n            >\n              打印数据\n            </Button>\n          </>\n        );\n      }}\n    </Group>\n  );\n};'}));const Oe=()=>{const e=c.exports.useRef(new $e([["Vick"],["Tom"],["Jack"],["Lulu"]]));return u.createElement(u.Fragment,null,u.createElement("ul",{className:"list-demo__ul"},u.createElement(Ne,{control:e.current},(e=>{var a=e,{controls:l}=a;((e,a)=>{var l={};for(var o in e)n.call(e,o)&&a.indexOf(o)<0&&(l[o]=e[o]);if(null!=e&&t)for(var o of t(e))a.indexOf(o)<0&&r.call(e,o)&&(l[o]=e[o])})(a,["controls"]);return u.createElement(u.Fragment,null,l.map(((e,t)=>u.createElement("li",{key:`key${t}`},u.createElement(O,null,t+1),u.createElement(de,{name:`${t}`},(({value:e,setValue:t})=>u.createElement(d,{label:"姓名",value:e,onChange:e=>t(e.target.value)})))))))}))),u.createElement(D,{variant:"contained",color:"primary",onClick:()=>{console.log(e.current.value)}},"在控制台中打印数据"))},Be=()=>u.createElement("div",{className:"page"},u.createElement(w,{paragraph:!0,variant:"h2"},"列表"),u.createElement(w,{paragraph:!0},"我们用List指代列表，与Group的用法很接近，它是由index为key，以其他controller为value组成的数组型数据源。"),u.createElement(w,{paragraph:!0},"我们直接用一个例子进行描述："),u.createElement(Se,{demo:u.createElement(Oe,null),code:'import React, { useRef } from "react";\nimport { Avatar, Button, TextField } from "@material-ui/core";\nimport { Field,ListControl,List } from "react-observable-form";\nimport "./index.less";\n\nconst ListDemo = () => {\n  const controlRef = useRef(new ListControl([["Vick"], ["Tom"], ["Jack"], ["Lulu"]]));\n\n  return (\n    <>\n      <ul className="list-demo__ul">\n        <List control={controlRef.current}>\n          {({ controls, ...rest }) => {\n            return (\n              <>\n                {controls.map((control, i) => {\n                  return (\n                    <li key={`key${i}`}>\n                      <Avatar>{i + 1}</Avatar>\n                      <Field name={`${i}`}>\n                        {({ value, setValue }) => {\n                          return <TextField label="姓名" value={value} onChange={(e) => setValue(e.target.value)} />;\n                        }}\n                      </Field>\n                    </li>\n                  );\n                })}\n              </>\n            );\n          }}\n        </List>\n      </ul>\n\n      <Button\n        variant="contained"\n        color={"primary"}\n        onClick={() => {\n          console.log(controlRef.current.value);\n        }}\n      >\n        在控制台中打印数据\n      </Button>\n    </>\n  );\n};'}));const Ae=e=>{return null==(t=e.value)||0===t.length?{required:!0}:null;var t},qe=()=>{const e=c.exports.useRef(new ne("这是一条过长的姓名",{dirty:!0,validators:[Ae,(t=4,e=>{return null!=(n=e.value)&&"number"==typeof n.length&&e.value.length>t?{maxlength:{requiredLength:t,actualLength:e.value.length}}:null;var n})]}));var t;return u.createElement(u.Fragment,null,u.createElement(de,{control:e.current},(({value:e,setValue:t,dirty:n,errors:r})=>u.createElement(u.Fragment,null,u.createElement(d,{variant:"outlined",label:"姓名",error:Boolean(n&&r),value:e,onChange:e=>t(e.target.value)})))),u.createElement(Le,{control:e.current},(({dirty:e,errors:t})=>u.createElement(u.Fragment,null,e&&u.createElement(u.Fragment,null,(null==t?void 0:t.required)&&u.createElement(B,{error:!0},"请填写姓名"),(null==t?void 0:t.maxlength)&&u.createElement(B,{error:!0},"姓名不可大于",t.maxlength.requiredLength,"位，当前为",t.maxlength.actualLength,"位"))))))},We=()=>u.createElement("div",{className:"page"},u.createElement(w,{paragraph:!0,variant:"h2"},"校验"),u.createElement(w,{paragraph:!0},"我们可以在初始化时通过validators参数为controller设计校验规则，也可以通过controller暴露的setValidators方法方法动态修改校验规则。 controller会根据validators的顺序依次进行校验，我们可以在",u.createElement(F,{to:"/"},"动态表单"),"中了解更多内容。"),u.createElement(w,{paragraph:!0},"validators接受一组符合ValidatorFn类型的方法，开发者可以由此定义校验规则，同时,react-observable-form也为开发者准备了一些常用的校验方法可供参考与是用,",u.createElement("a",null,"可在此处查看"),"。这部分实现大量的参考了@angular/core的forms模块。"),u.createElement(w,{paragraph:!0},"为了让不同类型组件职能更单纯，我们提供了专门的","<Errors/>","组件处理错误信息，也可以在其他任意的组件中消费错误，如下："),u.createElement(Se,{demo:u.createElement(qe,null),code:'import React, { useRef } from "react";\nimport { TextField, FormHelperText } from "@material-ui/core";\n\nimport { maxLengthValidator, requiredValidator } from "react-observable-form/validators";\nimport { Error,Field,FieldControl } from "react-observable-form";\n\nexport const ValidateDemo = () => {\n  const controlRef = useRef(\n    new FieldControl("这是一条过长的姓名", { dirty: true, validators: [requiredValidator, maxLengthValidator(4)] })\n  );\n\n  return (\n    <>\n      <Field control={controlRef.current}>\n        {({ value, setValue, dirty, errors }) => {\n          return (\n            <>\n              <TextField\n                variant="outlined"\n                label={"姓名"}\n                // 同样可以在<Field/>中消费errors\n                error={Boolean(dirty && errors)}\n                value={value}\n                onChange={(e) => setValue(e.target.value)}\n              />\n            </>\n          );\n        }}\n      </Field>\n      <Error control={controlRef.current}>\n        {({ dirty, errors }) => {\n          return (\n            <>\n              {dirty && (\n                <>\n                  {errors?.required && <FormHelperText error>请填写姓名</FormHelperText>}\n\n                  {errors?.maxlength && (\n                    <FormHelperText error>\n                      姓名不可大于{errors.maxlength.requiredLength}位，当前为{errors.maxlength.actualLength}位\n                    </FormHelperText>\n                  )}\n                </>\n              )}\n            </>\n          );\n        }}\n      </Error>\n    </>\n  );\n};'})),Me=()=>u.createElement("div",{className:"page"},u.createElement(w,{paragraph:!0,variant:"h2"},"动态表单"),u.createElement(w,{paragraph:!0},"controller提供了大量的方法对对状态进行控制，我们可以通过调用这些方法实现动态表单效果。"),u.createElement(w,{paragraph:!0},"试想一个场景，我们设计一个婚姻状况的调查问卷。如果是已婚人士，需要填写配偶的姓名，否则清空配偶姓名栏目，并禁止输入。思路如下："),u.createElement(w,{paragraph:!0},"首先我们从GroupController中获取婚姻状况的FieldController，并订阅其变化。"),u.createElement(w,{paragraph:!0},"当发现婚姻状况变为未婚时，获取配偶姓名的FieldController。通过setValue方法将value清空，再通过disable将其禁用，反之，利用enable方法将其开放使用。效果如下："),u.createElement(Se,{demo:u.createElement(Fe,null),code:'import React from "react";\nimport { FormControlLabel, FormLabel, Radio, RadioGroup, TextField } from "@material-ui/core";\nimport { GroupControl,Field,Group } from "react-observable-form";\n\nconst group = new GroupControl({\n  married: ["unmarried"],\n  spouse: ["", { disabled: true }],\n});\n\nconst married = group.get("married");\nconst spouse = group.get("spouse");\n\nmarried.valueChange.subscribe((v) => {\n  if (v === "married") {\n    spouse.enable();\n  } else {\n    spouse.setValue("");\n    spouse.disable();\n  }\n});\n\nexport const DisableDemo = () => {\n  return (\n    <Group control={group}>\n      {() => {\n        return (\n          <>\n            <FormLabel component="legend">婚姻状况</FormLabel>\n            <Field name="married">\n              {({ value, setValue }) => {\n                return (\n                  <>\n                    <RadioGroup\n                      value={value}\n                      onChange={(e) => {\n                        setValue(e.target.value);\n                      }}\n                    >\n                      <FormControlLabel value="unmarried" control={<Radio />} label="未婚" />\n                      <FormControlLabel value="married" control={<Radio />} label="已婚" />\n                    </RadioGroup>\n                  </>\n                );\n              }}\n            </Field>\n\n            <br />\n\n            <Field name="spouse">\n              {({ value, setValue, disabled }) => {\n                return (\n                  <TextField\n                    label="配偶姓名"\n                    disabled={disabled}\n                    value={value}\n                    onChange={(e) => setValue(e.target.value)}\n                  />\n                );\n              }}\n            </Field>\n          </>\n        );\n      }}\n    </Group>\n  );\n};\n'})),He=()=>u.createElement("div",{className:"page"},u.createElement(w,{paragraph:!0,variant:"h2"},"订阅变化"),u.createElement(w,{paragraph:!0},"让开发者自由订阅表单状态变化是开发react-observable-form的初衷，react-observable-form使用Rxjs提供订阅功能。 开发者可以订阅value，disabled，dirty，errors，validate等等不同的状态变化并作出响应。 比如对表单元素进行操作，以达到动态表单的效果，再比如，表单某个值发生变化时实时发送请求。"),u.createElement(w,{paragraph:!0},"我们仍然以group为例，controller提供valueChange提供开发者进行对value变化的订阅。此处完全使用Rxjs的api， 如果你对Rxjs并不了解，也并不会影响你的使用。更多的可订阅对象请在",u.createElement(F,{to:"/"},"API"),"中了解。"),u.createElement(w,{paragraph:!0},"如果开发者觉得订阅valueChange很麻烦，建议自行封装hook简化逻辑，",u.createElement("b",null,"但是你一定要清楚Rxjs做了什么"),"。"),u.createElement(w,{paragraph:!0},"请打开控制台查看value变化："),u.createElement(Se,{demo:u.createElement(_e,null),code:'import React, { useEffect, useRef } from "react";\nimport { Button, TextField } from "@material-ui/core";\n\nimport { Field, Group, GroupControl } from "react-observable-forms";\n\nconst GroupDemo = () => {\n  const groupControlRef = useRef(\n    new GroupControl({\n      consignee: ["Vick"],\n      address: ["No.1,Chaowai Street,Chaoyang District,Beijing City"],\n    })\n  );\n\n  useEffect(() => {\n    const subscription = groupControlRef.current.valueChange.subscribe((v) => {\n      console.log("value changed", v);\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  return (\n    <Group control={groupControlRef.current}>\n      {(props) => {\n        return (\n          <>\n            <Field name="consignee">\n              {({ value, setValue }) => {\n                return (\n                  <TextField\n                    label="consignee"\n                    variant="outlined"\n                    value={value}\n                    onChange={(e) => setValue(e.target.value)}\n                  />\n                );\n              }}\n            </Field>\n\n            <Field name="address">\n              {({ value, setValue }) => {\n                return (\n                  <TextField\n                    label="address"\n                    variant="outlined"\n                    multiline\n                    maxRows={14}\n                    value={value}\n                    onChange={(e) => setValue(e.target.value)}\n                  />\n                );\n              }}\n            </Field>\n\n            <Button\n              variant="contained"\n              color={"primary"}\n              onClick={() => {\n                console.log(groupControlRef.current.value);\n              }}\n            >\n              在控制台中打印数据\n            </Button>\n          </>\n        );\n      }}\n    </Group>\n  );\n};\n'})),Ie=()=>u.createElement("div",{className:"page"},u.createElement(w,{paragraph:!0,variant:"h2"},"更多选择"),u.createElement(w,{paragraph:!0},"React社区中还有非常多优秀作品值得关注："),u.createElement(w,{paragraph:!0},u.createElement("ul",null,u.createElement("li",null,u.createElement("a",{href:"https://www.react-hook-form.com"},"react-hook-form")),u.createElement("li",null,u.createElement("a",{href:"https://www.npmjs.com/package/react-final-form"},"react-final-form")),u.createElement("li",null,u.createElement("a",{href:"https://www.npmjs.com/package/formik"},"formik"))))),Ue=new ve({passWord:["",{validators:[Ae]}],confirmPassWord:["",{validators:[Ae]}]},{validators:[e=>e.value.confirmPassWord===e.value.passWord?null:{confirmPassword:!0}]}),Je=e=>{var t;return u.createElement(u.Fragment,null,e.dirty&&(null==(t=e.errors)?void 0:t.required)&&u.createElement(B,{error:!0},"必填项"))},ze=()=>u.createElement(u.Fragment,null,u.createElement(be,{control:Ue},(e=>u.createElement(u.Fragment,null,u.createElement(de,{name:"passWord"},(({value:e,setValue:t})=>u.createElement(d,{label:"密码",variant:"outlined",value:e,onChange:e=>t(e.target.value)}))),u.createElement(Le,{name:"passWord"},Je),u.createElement("br",null),u.createElement("br",null),u.createElement(de,{name:"confirmPassWord"},(({value:e,setValue:t})=>u.createElement(d,{label:"再次确认密码",variant:"outlined",value:e,onChange:e=>t(e.target.value)}))),u.createElement(Le,{name:"confirmPassWord"},Je)))),u.createElement(Le,{control:Ue},(e=>{var t;return u.createElement(u.Fragment,null,e.dirty&&(null==(t=e.errors)?void 0:t.confirmPassword)&&u.createElement(B,{error:!0},"两次密码不一致"))}))),Ke=()=>u.createElement("div",{className:"page"},u.createElement(w,{paragraph:!0,variant:"h2"},"联合校验"),u.createElement(w,{paragraph:!0},"说一个经典的场景：注册账号的时候往往需要输入两次密码以免输入失误。当我两次输入的密码不一致的时候，是不能通过校验的。"),u.createElement(w,{paragraph:!0},"此时,第一条密码没有问题，第二条密码也没有问题，但是两条密码组合在一起就出错了。"),u.createElement(w,{paragraph:!0},"那么我们要在更上层的Group中对这两条密码进行校验。实现如下："),u.createElement(Se,{demo:u.createElement(ze,null),code:'import React from "react";\nimport { TextField, FormHelperText } from "@material-ui/core";\n\nimport { Error,ErrorInternalProps, Field, Group, GroupControl,ValidatorFn } from "react-observable-form";\nimport { requiredValidator } from "react-observable-form/validators";\n\ninterface FormValue {\n  passWord: string;\n  confirmPassWord: string;\n}\n\nconst confirmPasswordValidator: ValidatorFn<FormValue> = (control) => {\n  return control.value.confirmPassWord === control.value.passWord ? null : { confirmPassword: true };\n};\n\nconst formGroup = new GroupControl(\n  {\n    passWord: ["", { validators: [requiredValidator] }],\n    confirmPassWord: ["", { validators: [requiredValidator] }],\n  },\n  { validators: [confirmPasswordValidator] }\n);\n\nconst RequiredErrorMessage = (props: ErrorInternalProps) => (\n  <>{props.dirty && props.errors?.required && <FormHelperText error>{"必填项"}</FormHelperText>}</>\n);\n\nconst UnitValidateDemo = () => {\n  return (\n    <>\n      <Group control={formGroup}>\n        {(props) => {\n          return (\n            <>\n              <Field name="passWord">\n                {({ value, setValue }) => {\n                  return (\n                    <TextField\n                      label="密码"\n                      variant="outlined"\n                      value={value}\n                      onChange={(e) => setValue(e.target.value)}\n                    />\n                  );\n                }}\n              </Field>\n              <Error name="passWord">{RequiredErrorMessage}</Error>\n\n              <br />\n              <br />\n\n              <Field name="confirmPassWord">\n                {({ value, setValue }) => {\n                  return (\n                    <TextField\n                      label="再次确认密码"\n                      variant="outlined"\n                      value={value}\n                      onChange={(e) => setValue(e.target.value)}\n                    />\n                  );\n                }}\n              </Field>\n              <Error name="confirmPassWord">{RequiredErrorMessage}</Error>\n            </>\n          );\n        }}\n      </Group>\n\n      <Error control={formGroup}>\n        {(props) => (\n          <>{props.dirty && props.errors?.confirmPassword && <FormHelperText error>两次密码不一致</FormHelperText>}</>\n        )}\n      </Error>\n    </>\n  );\n};'}));const Qe=()=>new ve({name:[""],tel:[""]}),Xe=()=>{const e=c.exports.useRef(new ve({name:["",{validators:[Ae]}],familyMembers:new $e([Qe()],{validators:[Ae]})}));return u.createElement(u.Fragment,null,u.createElement(be,{control:e.current},(t=>u.createElement(u.Fragment,null,u.createElement(w,{variant:"h6"},"本人："),u.createElement(de,{name:"name"},(({value:e,setValue:t})=>u.createElement(d,{label:"本人姓名",value:e,onChange:e=>t(e.target.value)}))),u.createElement("br",null),u.createElement("br",null),u.createElement(w,{variant:"h6"},"家庭成员："),u.createElement(A,{component:q},u.createElement(W,null,u.createElement(M,null,u.createElement(H,null,u.createElement(I,null,"姓名"),u.createElement(I,null,"联系电话"),u.createElement(I,null,"操作"))),u.createElement(U,null,u.createElement(Ne,{name:"familyMembers"},(({controls:t})=>u.createElement(u.Fragment,null,t.map(((t,n)=>u.createElement(be,{name:`${n}`,key:`${n}`},(()=>u.createElement(H,null,u.createElement(I,null,u.createElement(de,{name:"name"},(({value:e,setValue:t})=>u.createElement(d,{label:"姓名",value:e,onChange:e=>t(e.target.value)})))),u.createElement(I,null,u.createElement(de,{name:"tel"},(({value:e,setValue:t})=>u.createElement(d,{label:"联系电话",value:e,onChange:e=>t(e.target.value)})))),u.createElement(I,null,u.createElement(D,{color:"primary",onClick:()=>{e.current.get("familyMembers").remove(n)}},"删除"))))))))))))),u.createElement(Le,{name:"familyMembers"},(({errors:e,dirty:t})=>u.createElement(u.Fragment,null,(null==e?void 0:e.required)&&u.createElement(B,{error:!0},"至少填一名家庭成员")))),u.createElement("br",null),u.createElement(D,{variant:"contained",color:"primary",onClick:()=>{e.current.get("familyMembers").push(Qe())}},"加一名成员")))),u.createElement("br",null),u.createElement("br",null),u.createElement(D,{variant:"contained",color:"primary",onClick:()=>{console.log(e.current.value)}},"在控制台中打印数据"))},Ye=()=>u.createElement("div",{className:"page"},u.createElement(w,{paragraph:!0,variant:"h2"},"复杂嵌套"),u.createElement(w,{paragraph:!0},"我们在基础使用中尝试过将Field嵌入Group与List，事实上不止Field，Group/List也可以作为Group/List的子Controller， 我们可以基于此作出更复杂的设计。"),u.createElement(w,{paragraph:!0},"试想一个场景：我们做一张统计家庭成员的表单，需要填写本人姓名，动态添加家庭成员，每个家庭成员需要填写姓名与联系电话。我们设计出如下的嵌套关系："),u.createElement("img",{src:"/react-observable-form/assets/nest.41279d1e.png",width:600}),u.createElement(w,{paragraph:!0},"实现如下："),u.createElement(Se,{demo:u.createElement(Xe,null),code:'import React, { useRef } from "react";\nimport { Button, FormHelperText, Table, TableBody, TableCell, TableHead, TableRow, TextField } from "@material-ui/core";\n\nimport { Error,List,Field,ListControl,GroupControl,Group } from "react-observable-form";\nimport { requiredValidator } from "react-observable-form/validators";\n\nconst createFamilyMemberGroup = () => {\n  return new GroupControl({\n    name: [""],\n    tel: [""],\n  });\n};\n\nconst NestedDemo = () => {\n  const fromGroupRef = useRef(\n    new GroupControl({\n      name: ["", { validators: [requiredValidator] }],\n      familyMembers: new ListControl([createFamilyMemberGroup()], {\n        validators: [requiredValidator],\n      }),\n    })\n  );\n\n  return (\n    <>\n      <Group control={fromGroupRef.current}>\n        {(v) => (\n          <>\n            <Field name="name">\n              {({ value, setValue }) => {\n                return <TextField label="本人姓名" value={value} onChange={(e) => setValue(e.target.value)} />;\n              }}\n            </Field>\n            <br />\n            <br />\n            家庭成员：\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>姓名</TableCell>\n                  <TableCell>联系电话</TableCell>\n                  <TableCell>操作</TableCell>\n                </TableRow>\n              </TableHead>\n\n              <TableBody>\n                <List name="familyMembers">\n                  {({ controls }) => {\n                    return (\n                      <>\n                        {controls.map((control, i) => {\n                          return (\n                            <Group name={`${i}`} key={`${i}`}>\n                              {() => {\n                                return (\n                                  <TableRow>\n                                    <TableCell>\n                                      <Field name="name">\n                                        {({ value, setValue }) => {\n                                          return (\n                                            <TextField\n                                              label="姓名"\n                                              value={value}\n                                              onChange={(e) => setValue(e.target.value)}\n                                            />\n                                          );\n                                        }}\n                                      </Field>\n                                    </TableCell>\n                                    <TableCell>\n                                      <Field name="tel">\n                                        {({ value, setValue }) => {\n                                          return (\n                                            <TextField\n                                              label="联系电话"\n                                              value={value}\n                                              onChange={(e) => setValue(e.target.value)}\n                                            />\n                                          );\n                                        }}\n                                      </Field>\n                                    </TableCell>\n                                    <TableCell>\n                                      <Button\n                                        color="primary"\n                                        onClick={() => {\n                                          fromGroupRef.current.get<ListControl>("familyMembers").remove(i);\n                                        }}\n                                      >\n                                        删除\n                                      </Button>\n                                    </TableCell>\n                                  </TableRow>\n                                );\n                              }}\n                            </Group>\n                          );\n                        })}\n                      </>\n                    );\n                  }}\n                </List>\n              </TableBody>\n            </Table>\n            <Error name="familyMembers">\n              {({ errors, dirty }) => (\n                <>{errors?.required && <FormHelperText error>至少填一名家庭成员</FormHelperText>}</>\n              )}\n            </Error>\n            <br />\n            <Button\n              variant="contained"\n              color="primary"\n              onClick={() => {\n                fromGroupRef.current.get<ListControl>("familyMembers").push(createFamilyMemberGroup());\n              }}\n            >\n              加一名成员\n            </Button>\n          </>\n        )}\n      </Group>\n      <br />\n      <br />\n      <Button\n        variant="contained"\n        color="primary"\n        onClick={() => {\n          console.log(fromGroupRef.current.value);\n        }}\n      >\n        在控制台中打印数据\n      </Button>\n    </>\n  );\n};\n\nexport default NestedDemo;\n'})),Ze=()=>{const e=c.exports.useRef(new ne(""));return c.exports.useEffect((()=>{const t=e.current.valueChange.pipe(J(500)).subscribe((e=>{console.log("value change",e)}));return()=>{t.unsubscribe()}}),[]),u.createElement(de,{control:e.current},(({value:e,setValue:t})=>u.createElement(d,{label:"延迟500ms",value:e,onChange:e=>t(e.target.value)})))},et=()=>u.createElement("div",{className:"page"},u.createElement(w,{paragraph:!0,variant:"h2"},"与Rxjs"),u.createElement(w,{paragraph:!0},"Controller提供的每一个可订阅对象都是Rxjs提供的Subscription，我们可以使用Rxjs Operators协助处理数据流。"),u.createElement(w,{paragraph:!0},"举个例子，利用debounceTime对搜索框进行防抖处理，请在控制台中查看效果："),u.createElement(Se,{demo:u.createElement(Ze,null),code:"1"})),tt=()=>u.createElement("div",{className:"page"},u.createElement(w,{paragraph:!0,variant:"h2"},"<Field<V> ...props/>"),u.createElement(w,{paragraph:!0,variant:"h4"},"props:","FieldProps<V>"),u.createElement(A,{component:q},u.createElement(W,null,u.createElement(M,null,u.createElement(H,null,u.createElement(I,null,"参数"),u.createElement(I,null,"说明"),u.createElement(I,null,"类型"),u.createElement(I,null,"必需"),u.createElement(I,null,"默认"))),u.createElement(U,null,u.createElement(H,null,u.createElement(I,{component:"th",scope:"row"},"name"),u.createElement(I,{component:"th",scope:"row"},"字段名，与control互斥"),u.createElement(I,{component:"th",scope:"row"},"string"),u.createElement(I,{component:"th",scope:"row"},"否"),u.createElement(I,{component:"th",scope:"row"},"-")),u.createElement(H,null,u.createElement(I,{component:"th",scope:"row"},"control"),u.createElement(I,{component:"th",scope:"row"},"绑定的controller，与name互斥"),u.createElement(I,{component:"th",scope:"row"},"FieldControl<V = any>"),u.createElement(I,{component:"th",scope:"row"},"否"),u.createElement(I,{component:"th",scope:"row"},"-")),u.createElement(H,null,u.createElement(I,{component:"th",scope:"row"},"children"),u.createElement(I,{component:"th",scope:"row"},"内容"),u.createElement(I,{component:"th",scope:"row"},"(props: ",u.createElement("a",{href:"#fieldInternalProps"},"FieldInternalProps<V>"),") ","=>"," ReactElement"),u.createElement(I,{component:"th",scope:"row"},"是"),u.createElement(I,{component:"th",scope:"row"},"-"))))),u.createElement("br",null),u.createElement(w,{paragraph:!0,variant:"h4",id:"fieldInternalProps"},"FieldInternalProps<V>"),u.createElement(A,{component:q},u.createElement(W,null,u.createElement(M,null,u.createElement(H,null,u.createElement(I,null,"参数"),u.createElement(I,null,"说明"),u.createElement(I,null,"类型"))),u.createElement(U,null,u.createElement(H,null,u.createElement(I,{component:"th",scope:"row"},"name"),u.createElement(I,{component:"th",scope:"row"},"字段名"),u.createElement(I,{component:"th",scope:"row"},"string?")),u.createElement(H,null,u.createElement(I,{component:"th",scope:"row"},"value"),u.createElement(I,{component:"th",scope:"row"},"值"),u.createElement(I,{component:"th",scope:"row"},"<V>")),u.createElement(H,null,u.createElement(I,{component:"th",scope:"row"},"setValue"),u.createElement(I,{component:"th",scope:"row"},"更新值"),u.createElement(I,{component:"th",scope:"row"},'FieldControl<V>["setValue"]')),u.createElement(H,null,u.createElement(I,{component:"th",scope:"row"},"setValue"),u.createElement(I,{component:"th",scope:"row"},"更新值"),u.createElement(I,{component:"th",scope:"row"},'FieldControl<V>["setValue"]')),u.createElement(H,null,u.createElement(I,{component:"th",scope:"row"},"markAsDirty"),u.createElement(I,{component:"th",scope:"row"},"标记值未被修改过"),u.createElement(I,{component:"th",scope:"row"},'FieldControl<V>["markAsDirty"]')),u.createElement(H,null,u.createElement(I,{component:"th",scope:"row"},"markAsPristine"),u.createElement(I,{component:"th",scope:"row"},"标记值被修改过"),u.createElement(I,{component:"th",scope:"row"},'FieldControl<V>["markAsPristine"]')),u.createElement(H,null,u.createElement(I,{component:"th",scope:"row"},"pristine"),u.createElement(I,{component:"th",scope:"row"},"值未被修改过"),u.createElement(I,{component:"th",scope:"row"},"boolean")),u.createElement(H,null,u.createElement(I,{component:"th",scope:"row"},"dirty"),u.createElement(I,{component:"th",scope:"row"},"值被修改过"),u.createElement(I,{component:"th",scope:"row"},"boolean")),u.createElement(H,null,u.createElement(I,{component:"th",scope:"row"},"disabled"),u.createElement(I,{component:"th",scope:"row"},"被禁用"),u.createElement(I,{component:"th",scope:"row"},"boolean")),u.createElement(H,null,u.createElement(I,{component:"th",scope:"row"},"enabled"),u.createElement(I,{component:"th",scope:"row"},"未被禁用"),u.createElement(I,{component:"th",scope:"row"},"boolean")),u.createElement(H,null,u.createElement(I,{component:"th",scope:"row"},"valid"),u.createElement(I,{component:"th",scope:"row"},"通过校验"),u.createElement(I,{component:"th",scope:"row"},"boolean")),u.createElement(H,null,u.createElement(I,{component:"th",scope:"row"},"invalid"),u.createElement(I,{component:"th",scope:"row"},"未通过校验"),u.createElement(I,{component:"th",scope:"row"},"boolean"))))));function nt(){const e=z();return u.createElement("div",{className:"App"},"/"!==e.pathname&&u.createElement(ke,null),u.createElement("div",{className:"content"},u.createElement(K,null,u.createElement(Q,{exact:!0,path:"/",component:ye}),u.createElement(Q,{path:"/quick-start",component:xe}),u.createElement(Q,{path:"/core",component:Te}),u.createElement(Q,{path:"/field",component:Pe}),u.createElement(Q,{path:"/group",component:De}),u.createElement(Q,{path:"/list",component:Be}),u.createElement(Q,{path:"/validate",component:We}),u.createElement(Q,{path:"/subscribe",component:He}),u.createElement(Q,{path:"/dynamic",component:Me}),u.createElement(Q,{path:"/resources",component:Ie}),u.createElement(Q,{path:"/uniteValidate",component:Ke}),u.createElement(Q,{path:"/nest",component:Ye}),u.createElement(Q,{path:"/useRx",component:et}),u.createElement(Q,{path:"/fieldApi",component:tt}))))}const rt=X({palette:{primary:{main:"#4c00b7"},secondary:{main:"#4c00b7"}},typography:{h2:{color:"#4c00b7",fontWeight:100,fontSize:42},h4:{fontWeight:100},body1:{fontWeight:100,textIndent:32}}});Y.render(u.createElement(u.StrictMode,null,u.createElement(Z,{theme:rt},u.createElement(ee,{basename:"/react-observable-form"},u.createElement(nt,null)))),document.getElementById("root"));
