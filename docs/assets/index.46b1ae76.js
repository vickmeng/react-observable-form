var e=Object.defineProperty,t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable,o=(t,n,r)=>n in t?e(t,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[n]=r,l=(e,l)=>{for(var a in l||(l={}))n.call(l,a)&&o(e,a,l[a]);if(t)for(var a of t(l))r.call(l,a)&&o(e,a,l[a]);return e};import{S as a,l as c,t as s,s as m,r as i,R as p,F as u,I as E,T as h,d,L as v,a as b,h as g,b as w,c as C,e as y,f,g as F,i as V,j as x,C as k,k as R,m as G,n as S,o as A,p as j,q as T,u as P,v as _,B as N,A as O,w as L,x as $,y as B,z as D,D as I,E as q,P as W,G as M,H,J as U,K as J,M as z,N as K,O as Q,Q as X,U as Y,V as Z,W as ee,X as te,Y as ne,Z as re,_ as oe,$ as le,a0 as ae}from"./vendor.4f7e03d8.js";class ce{constructor(){this._errors=null,this._asyncErrors=null,this.valueSubject$=new a,this.disabledSubject$=new a,this.validSubject$=new a,this.dirtySubject$=new a,this.errorsSubject$=new a,this.asyncErrorsSubject$=new a,this.destroy$=new a,this.asyncValidSubjectNotifier$=new a,this.initBasicParams=(e,{disabled:t=!1,dirty:n=!1,autoValidate:r=!0,validators:o=[],autoAsyncValidate:l=!1,asyncValidators:a=[],autoMarkAsDirty:c=!0})=>{this._value=e,this._validators=o,this._asyncValidators=a,this._disabled=t,this._dirty=n,this._autoValidate=r,this._autoAsyncValidate=l,r&&(this._errors=me(this,o)),this.validChange.subscribe((e=>{this._valid=e})),this.errorsChange.subscribe((e=>{this._errors=e})),this.asyncValidSubjectNotifierChange.subscribe((e=>{this.setAsyncErrors(e),this.setValidByAsyncAction(this._noError())})),this.asyncErrorsChange.subscribe((e=>{this._asyncErrors=e})),this.disabledChange.subscribe((e=>{this._disabled=e})),this.dirtyChange.subscribe((e=>{this._dirty=e})),this.valueChange.subscribe((e=>{this._value=e})),r&&this.valueChange.subscribe(this.validateAndUpdateErrors),l&&(this.asyncValidSubjectNotifier$.next(this),this.valueChange.subscribe(this.asyncValidateAndUpdateErrors)),this._valid=l?"pending":this._noError(),c&&this.valueChange.subscribe(this.markAsDirty)},this.destroy=()=>{this.destroy$.next(!0)},this.setErrors=e=>{c.exports.isEqual(e,this.errors)||this.errorsSubject$.next(e)},this.setAsyncErrors=e=>{c.exports.isEqual(e,this.asyncErrors)||this.asyncErrorsSubject$.next(e)},this.setValidators=e=>{this._validators=e,this._autoValidate&&this.validateAndUpdateErrors()},this.setAsyncValidators=e=>{this._asyncValidators=e,this._autoAsyncValidate&&this.asyncValidateAndUpdateErrors()},this.disable=()=>{this.setDisabled(!0)},this.enable=()=>{this.setDisabled(!1)},this.markAsDirty=()=>{this.setDirty(!0)},this.markAsPristine=()=>{this.setDirty(!1)},this.validateAndUpdateErrors=()=>{const e=me(this,this._validators);this.setErrors(e),this.setValid(this._noError())},this.asyncValidateAndUpdateErrors=()=>{this.setValid("pending"),this.asyncValidSubjectNotifier$.next(this)},this.setValid=e=>{e!==this.valid&&(e&&"pending"===this.valid||this.validSubject$.next(e))},this.setValidByAsyncAction=e=>{e!==this.valid&&this.validSubject$.next(e)},this.setDisabled=e=>{e!==this.disabled&&this.disabledSubject$.next(e)},this.setDirty=e=>{e!==this.dirty&&this.dirtySubject$.next(e)}}get value(){return this._value}get errors(){return this._errors}get asyncErrors(){return this._asyncErrors}get valid(){return this._valid}get invalid(){return!this._valid}get disabled(){return this._disabled}get enabled(){return!this._disabled}get dirty(){return this._dirty}get pristine(){return!this._dirty}get valueChange(){return this.valueSubject$.asObservable().pipe(s(this.destroy$))}get errorsChange(){return this.errorsSubject$.asObservable().pipe(s(this.destroy$))}get asyncErrorsChange(){return this.asyncErrorsSubject$.asObservable().pipe(s(this.destroy$))}get disabledChange(){return this.disabledSubject$.asObservable().pipe(s(this.destroy$))}get dirtyChange(){return this.dirtySubject$.asObservable().pipe(s(this.destroy$))}get validChange(){return this.validSubject$.asObservable().pipe(s(this.destroy$))}get asyncValidSubjectNotifierChange(){return this.asyncValidSubjectNotifier$.asObservable().pipe(s(this.destroy$),m((e=>{const t=e._asyncValidators.map((t=>t(e)));return Promise.all(t).then((e=>e.reduce(((e,t)=>(t&&(e=Object.assign({},e,t)),e)),null)))})))}}class se extends ce{constructor(e,t={}){super(),this._noError=()=>!(this.errors||this.asyncErrors),this.setValue=e=>{e!==this.value&&this.valueSubject$.next(e)},this.reset=()=>{this.setValue(this._initValue)},this._initValue=e,this.initBasicParams(e,t)}}const me=(e,t)=>{const n=t.reduce(((t,n)=>{const r=n(e);return r&&(t=l(l({},t),r)),t}),{});return c.exports.isEmpty(n)?null:n},ie=e=>e instanceof ce?e:new se(...e),pe=(e,t)=>{const n=i.exports.useRef(!1);i.exports.useEffect((()=>{if(n.current)return e();n.current=!0}),t)},ue=e=>{const[t,n]=i.exports.useState(e.disabled);return i.exports.useEffect((()=>{const t=e.disabledChange.subscribe(n);return()=>{t.unsubscribe()}}),[e]),pe((()=>{n(e.disabled)}),[e]),t},Ee=e=>{const[t,n]=i.exports.useState(e.dirty);return i.exports.useEffect((()=>{const t=e.dirtyChange.subscribe(n);return()=>{t.unsubscribe()}}),[e]),pe((()=>{n(e.dirty)}),[e]),t},he=e=>{const[t,n]=i.exports.useState(e.valid);return i.exports.useEffect((()=>{const t=e.validChange.subscribe(n);return()=>{t.unsubscribe()}}),[e]),pe((()=>{n(e.valid)}),[e]),t},de=e=>{const[t,n]=i.exports.useState(e.errors);return i.exports.useEffect((()=>{const t=e.errorsChange.subscribe(n);return()=>{t.unsubscribe()}}),[e]),pe((()=>{n(e.errors)}),[e]),t},ve=e=>{const[t,n]=i.exports.useState(e.controls);return i.exports.useEffect((()=>{const t=e.controlsChange.subscribe(n);return()=>{t.unsubscribe()}}),[e]),pe((()=>{n(e.controls)}),[e]),t},be=p.createContext(null);function ge(e){const{children:t}=e,n=i.exports.useContext(be),{name:r,control:o}=function(e){return void 0!==e.name}(e)?{name:e.name,control:n.get(e.name)}:{control:e.control};if(!(o instanceof se))throw new Error("props error:Field can only receive FieldControl as control");const l=(e=>{const[t,n]=i.exports.useState(e.value);return i.exports.useEffect((()=>{const t=e.valueChange.subscribe(n);return()=>{t.unsubscribe()}}),[e]),pe((()=>{n(e.value)}),[e]),t})(o),a=ue(o),c=Ee(o),s=he(o),m=de(o),p=(e=>{const[t,n]=i.exports.useState(e.asyncErrors);return i.exports.useEffect((()=>{const t=e.asyncErrorsChange.subscribe(n);return()=>{t.unsubscribe()}}),[e]),pe((()=>{n(e.asyncErrors)}),[e]),t})(o);return t({name:r,value:l,control:o,setValue:o.setValue,markAsDirty:o.markAsDirty,markAsPristine:o.markAsPristine,validateAndUpdateErrors:o.validateAndUpdateErrors,asyncValidateAndUpdateErrors:o.asyncValidateAndUpdateErrors,errors:m,asyncErrors:p,disabled:a,valid:s,dirty:c})}const we=()=>{const e=i.exports.useRef(new se(""));return p.createElement(ge,{control:e.current},(({value:e,setValue:t})=>p.createElement(u.Item,{label:"Ant Design"},p.createElement(E,{value:e,onChange:e=>t(e.target.value)}))))},Ce=()=>{const e=i.exports.useRef(new se(""));return p.createElement(ge,{control:e.current},(({value:e,setValue:t})=>p.createElement(h,{label:"material-ui",value:e,onChange:e=>t(e.target.value)})))},ye=()=>{const e=i.exports.useRef(new se(""));return i.exports.useEffect((()=>{const t=e.current.valueChange.pipe(d(500)).subscribe((e=>{console.log("value change",e)}));return()=>{t.unsubscribe()}}),[]),p.createElement(ge,{control:e.current},(({value:e,setValue:t})=>p.createElement(h,{label:"防抖500ms",value:e,onChange:e=>t(e.target.value)})))};const fe=()=>p.createElement("main",{className:"home"},p.createElement("div",{className:"banner"},p.createElement("img",{src:"/react-observable-form/assets/rx.18995810.png",className:"rxImg"}),p.createElement("img",{src:"/react-observable-form/assets/react.7f55f92c.svg",className:"reactImg"}),p.createElement("nav",null,p.createElement("div",null,p.createElement(v,{className:"link",to:"/quick-start"},"文档"),p.createElement("a",{className:"link",href:"https://github.com/RxJS-CN",target:"_blank",rel:"noreferrer"},"RxJS 中文社区")),p.createElement("div",null,p.createElement("a",{href:"https://github.com/vickmeng/react-observable-form"},p.createElement(b,null)))),p.createElement("h1",null,"React Observable Form"),p.createElement("h2",null,"可自由订阅状态变化的React响应式表单方案"),p.createElement("div",null,p.createElement(v,{className:"quick-start link",to:"/quick-start"},"快速开始"))),p.createElement("section",null,p.createElement("h2",null,"自由订阅"),p.createElement("p",null,"随时随处订阅表单元素状态变化"),p.createElement("img",{src:"/react-observable-form/assets/flow.1c028861.png",width:500})),p.createElement("section",null,p.createElement("h2",null,"RxJs"),p.createElement("p",null,"享受RxJs所有Operators"),p.createElement("div",{className:"demo-wrapper"},p.createElement("div",{className:"code"},p.createElement(g,{language:"javascript",style:w},'valueChange\n.pipe(debounceTime(500))\n.subscribe((v) => {\n  console.log("value change", v);\n});')),p.createElement("div",{className:"demo"},p.createElement(ye,null)))),p.createElement("section",null,p.createElement("h2",null,"高性能"),p.createElement("p",null,"视图状态分离，精确渲染组件")),p.createElement("section",null,p.createElement("h2",null,"友好集成"),p.createElement("p",null,"自由桥接流行的组件库"),p.createElement("div",{className:"third"},p.createElement("div",{className:"third--demo antd"},p.createElement(we,null)),p.createElement("div",{className:"divide vertical"}),p.createElement("div",{className:"third--demo mui"},p.createElement(Ce,null)))),p.createElement("footer",null,"遵循 MIT 开源协议    Copyright © Rxjs-CN")),Fe=()=>p.createElement("div",{className:"page"},p.createElement(C,{paragraph:!0,variant:"h2"},"快速开始"),p.createElement(C,{paragraph:!0,variant:"h4"},"环境准备"),p.createElement(C,{paragraph:!0},"请确保使用 v16.8及更高版本的react"),p.createElement(C,{paragraph:!0,variant:"h4"},"安装"),p.createElement(g,{language:"javascript",style:w},"yarn add rxjs react-observable-form\n\nor\n\nnpm install rxjs react-observable-form"));const Ve={title:"基础使用",routes:[{text:"单一元素",link:"/field"},{text:"群组",link:"/group"},{text:"列表",link:"/list"},{text:"校验",link:"/validate"}]},xe={title:"高级使用",routes:[{text:"订阅变化",link:"/subscribe"},{text:"动态表单",link:"/dynamic"},{text:"联合校验",link:"/uniteValidate"},{text:"复杂嵌套",link:"/nest"},{text:"异步校验",link:"/asyncValidate"},{text:"与Rxjs",link:"/useRx"}]},ke={title:"API",routes:[{text:"<Field/>",link:"fieldApi"},{text:"<Group/>",link:"groupApi"},{text:"<List/>",link:"listApi"},{text:"<Error/>",link:"errorApi"},{text:"FieldControl",link:"fieldControlApi"},{text:"GroupControl",link:"groupControlApi"},{text:"ListControl",link:"listControlApi"}]},Re=({menu:e})=>{const[t,n]=i.exports.useState(!1);return p.createElement(p.Fragment,null,p.createElement(f,{button:!0,onClick:()=>{n(!t)}},p.createElement(F,{primary:e.title}),t?p.createElement(V,null):p.createElement(x,null)),p.createElement(k,{in:t,timeout:"auto",unmountOnExit:!0},p.createElement(y,{component:"div",disablePadding:!0,className:"submenu--list"},e.routes.map((e=>p.createElement(v,{to:e.link,key:e.text},p.createElement(f,{button:!0,className:"nested"},p.createElement(F,{primary:e.text}))))))))},Ge=()=>p.createElement("aside",{className:"menu"},p.createElement(y,{component:"nav","aria-labelledby":"nested-list-subheader"},p.createElement(v,{to:"/"},p.createElement(f,{button:!0},p.createElement(F,{primary:"首页"}))),p.createElement(v,{to:"/quick-start"},p.createElement(f,{button:!0},p.createElement(F,{primary:"快速开始"}))),p.createElement(v,{to:"/core"},p.createElement(f,{button:!0},p.createElement(F,{primary:"核心概念"}))),p.createElement(Re,{menu:Ve}),p.createElement(Re,{menu:xe}),p.createElement(Re,{menu:ke}),p.createElement(v,{to:"/resources"},p.createElement(f,{button:!0},p.createElement(F,{primary:"更多选择"}))))),Se=()=>p.createElement("div",{className:"page"},p.createElement(C,{paragraph:!0,variant:"h2"},"核心概念"),p.createElement(C,{paragraph:!0},"react-observable-form主要包含两个概念：Controller与Component。"),p.createElement(C,{paragraph:!0,variant:"h4"},"Controllers"),p.createElement(C,{paragraph:!0},"Controller是数据的源头，它为视图提供一系列可观察对象，以及操作数据的方法，使用者可以通过订阅这些可观察对象获得如：value，errors等状态。"),p.createElement(C,{paragraph:!0},"我们有如下三种class创建Controller："),p.createElement(C,{paragraph:!0},p.createElement("ul",null,p.createElement("li",null,"FieldControl：用以创建单一元素的控制器"),p.createElement("li",null,"GroupControl：用以创建群组元素的控制器"),p.createElement("li",null,"ListControl：用以创建列表元素的控制器"))),p.createElement(C,{paragraph:!0,variant:"h4"},"Components"),p.createElement(C,{paragraph:!0},"就是React组件，作为Controller的订阅者，可以获取其订阅的Controller的值向下传递，也提供方法让下级组件将状态上传，从而实现受控组件。"),p.createElement(C,{paragraph:!0},"我们有如下三种Components："),p.createElement(C,{paragraph:!0},p.createElement("ul",null,p.createElement("li",null," ","<Field/>","：FieldControl的订阅器"),p.createElement("li",null," ","<Group/>","：GroupControl的订阅器"),p.createElement("li",null," ","<List/>","：ListControl的订阅器"))),p.createElement("br",null),p.createElement(C,{paragraph:!0},"可以查看",p.createElement(v,{to:"/field"},"基础使用"),"更直观得进行学习")),Ae=({children:e})=>p.createElement(g,{language:"typescript",style:w},e),je=e=>{const[t,n]=p.useState(!1);return p.createElement(R,null,p.createElement(G,null,e.demo),p.createElement(S,{disableSpacing:!0},p.createElement(A,{onClick:()=>{n(!t)},"aria-expanded":t,"aria-label":"show more"},p.createElement(j,{color:t?"primary":"inherit"}))),p.createElement(k,{in:t,timeout:"auto",unmountOnExit:!0},p.createElement(G,null,p.createElement(Ae,null,e.code))))},Te=()=>p.createElement("div",{className:"page"},p.createElement(C,{paragraph:!0,variant:"h2"},"单一元素"),p.createElement(C,{paragraph:!0},"我们用Field指代单一元素，它是最小的数据源。往往绑定一个单独的受控组件，比如一个输入框，一个树形选择器。"),p.createElement(C,{paragraph:!0},"首先，我们创建一个FieldController作为数据源。"),p.createElement(C,{paragraph:!0},"兵无常势，水无常形。",p.createElement("b",null,"你可以根据需要把FieldController放在任何一个可方便获取的位置,可以是组件外，","<Context/>","中，或者各种状态管理工具，但请避免重复创造实例。")," ","本例中我们放在useRef里。"),p.createElement(Ae,null,'const controlRef = useRef(new FieldControl<string>(""));'),p.createElement("br",null),p.createElement(C,{paragraph:!0},"FieldControl接受两个参数，第一个参数是默认值，第二个参数是其他初始化配置。可以在",p.createElement(v,{to:"/"},"API"),"中获取更多信息。接下来利用","<Field/>","订阅FieldController。"),p.createElement(Ae,null,"<Field control={controlRef.current}></Field>"),p.createElement("br",null),p.createElement(C,{paragraph:!0},"将FieldController传入","<Field/>","，","<Field/>","会在初始化时自动订阅FieldController的状态，同时在销毁时取消订阅。"),p.createElement(C,{paragraph:!0},"接下来，将","<Field/>","得到的数据传递给视图"),p.createElement(Ae,null,'<Field control={controlRef.current}>\n    {({ value, setValue }) => {\n        return <TextField label="material-ui" value={value} onChange={(e) => setValue(e.target.value)} />;\n    }}\n</Field>'),p.createElement("br",null),p.createElement(C,{paragraph:!0},"<Field/>","接受函数作为children，向下传递状态与控制状态的方法。本例将value传入给视图组件，并暴露setValue方法，提供修改value的能力。",p.createElement("b",null,"如果使用者觉得这个函数有些啰嗦，开发团队期待你使用如HOC等任何的编程技巧简化代码。")),p.createElement("br",null),p.createElement(C,{paragraph:!0},"本例采用material-ui作为视图库。完整代码如下："),p.createElement(je,{code:'import { useRef } from "react";\nimport { TextField } from "@material-ui/core";\nimport { Field, FieldControl } from "react-observable-form";\n\nexport const BasicWithMui = () => {\n  const controlRef = useRef(new FieldControl<string>(""));\n\n  return (\n    <Field control={controlRef.current}>\n      {({ value, setValue }) => {\n        return <TextField label="material-ui" value={value} onChange={(e) => setValue(e.target.value)} />;\n      }}\n    </Field>\n  );\n};\n',demo:p.createElement(Ce,null)}));class Pe extends ce{constructor(e,t={}){super(),this.controlsSubject=new a,this._noError=()=>!(this.errors||this.asyncErrors||Object.values(this._controls).some((e=>!e._noError()))),this.get=e=>this._controls[e],this.setValue=e=>{this.destroyGraph(),this.setValueToControls(e),this.resetGraph(),this.valueSubject$.next(this.getGroupValueFromControls())},this.reset=()=>{this.destroyGraph(),Object.values(this.controls).forEach((e=>e.reset())),this.resetGraph(),this.valueSubject$.next(this.getGroupValueFromControls())},this.add=(e,t)=>{if(this.controls[e])return void console.warn(`already has control named ${e} in formGroup`);const n=Object.assign({},this.controls,{[e]:ie(t)});this.controlsSubject.next(n)},this.remove=e=>{if(!this.controls[e])return void console.warn(`cannot find control named ${e} in formGroup`);const t=Object.assign({},this.controls);delete t[e],this.controlsSubject.next(t)},this.initControls=e=>{const t={};for(const n in e)if(Object.prototype.hasOwnProperty.call(e,n)){const r=e[n],o=ie(r);o.parent=this,t[n]=o}this._controls=t},this.setValueToControls=e=>{Object.keys(this._controls).forEach((t=>{Object.prototype.hasOwnProperty.call(e,t)&&this._controls[t].setValue(e[t])}))},this.updatePrivateControlsAndResetSubscribeGraph=e=>{this._controls=e,this.valueSubject$.next(this.getGroupValueFromControls()),this.resetGraph()},this.getGroupValueFromControls=()=>{const e={};return Object.keys(this._controls).forEach((t=>{const n=this._controls[t];n.enabled&&(e[t]=n.value)})),e},this.resetGraph=()=>{const e=Object.values(this._controls),t=e.map((e=>e.valueChange)),n=e.map((e=>e.validChange)),r=e.map((e=>e.disabledChange));this.resetValueGraph([...t,...r]),this.resetValidGraph(n)},this.destroyGraph=()=>{this.valueChangesSubscription&&this.valueChangesSubscription.unsubscribe(),this.validChangesSubscription&&this.validChangesSubscription.unsubscribe()},this.resetValidGraph=e=>{this.validChangesSubscription&&this.validChangesSubscription.unsubscribe(),this.validChangesSubscription=T(...e).pipe(s(this.destroy$),P((()=>this._noError()))).subscribe(this.setValid)},this.initControls(e),this.initBasicParams(this.getGroupValueFromControls(),t),this.resetGraph(),this.controlsChange.subscribe(this.updatePrivateControlsAndResetSubscribeGraph)}get controls(){return this._controls}get controlsChange(){return this.controlsSubject.asObservable().pipe(s(this.destroy$))}resetValueGraph(e){this.valueChangesSubscription&&this.valueChangesSubscription.unsubscribe(),this.valueChangesSubscription=T(...e).pipe(s(this.destroy$),P((()=>this.getGroupValueFromControls()))).subscribe((e=>{this.valueSubject$.next(e)}))}}const _e=e=>{const{children:t}=e,n=i.exports.useContext(be),{name:r,control:o}=(e=>void 0!==e.name)(e)?{name:e.name,control:n.get(e.name)}:{control:e.control};if(!(o instanceof Pe))throw new Error("props error:Group can only receive GroupControl as control");const l={name:r,disabled:ue(o),control:o,childControls:ve(o)};return p.createElement(be.Provider,{value:o},t(l))};class Ne extends ce{constructor(e,t={}){super(),this.controlsSubject=new a,this.controlsChangeNotifyLock=!1,this._noError=()=>!(this.errors||this.asyncErrors||this._controls.some((e=>e._noError()))),this.get=e=>this._controls[+e],this.insert=(e,...t)=>{const n=[...this.controls],r=t.map((e=>ie(e)));n.splice(e,0,...r),this.controlsSubject.next(n)},this.push=(...e)=>{this.insert(this.controls.length,...e)},this.remove=(e,t=1)=>{const n=[...this.controls];n.splice(e,t),this.controlsSubject.next(n)},this.setValue=e=>{this.destroyGraph(),this.setValueToControls(e),this.resetGraph(),this.valueSubject$.next(this.getListValueFromControls())},this.reset=()=>{this.destroyGraph(),this.controls.forEach((e=>e.reset())),this.resetGraph(),this.valueSubject$.next(this.getListValueFromControls())},this.initControls=e=>{this._controls=e.map((e=>{const t=ie(e);return t.parent=this,t}))},this.setValueToControls=e=>{this._controls.forEach(((t,n)=>{Object.prototype.hasOwnProperty.call(e,n)&&t.setValue(e[n])}))},this.updatePrivateControlsAndResetSubscribeGraph=e=>{this.updatePrivateControls(e),this.valueSubject$.next(this.getListValueFromControls()),this.resetGraph()},this.updatePrivateControls=e=>{this._controls=e},this.getListValueFromControls=()=>{const e=[];return Object.keys(this._controls).forEach(((t,n)=>{const r=this._controls[n];r.enabled&&(e[n]=r.value)})),e},this.resetGraph=()=>{const e=this._controls.map((e=>e.valueChange)),t=this._controls.map((e=>e.validChange)),n=this._controls.map((e=>e.disabledChange));this.resetValueGraph([...e,...n]),this.resetValidGraph(t)},this.destroyGraph=()=>{this.valueChangesSubscription&&this.valueChangesSubscription.unsubscribe(),this.validChangesSubscription&&this.validChangesSubscription.unsubscribe()},this.resetValidGraph=e=>{this.validChangesSubscription&&this.validChangesSubscription.unsubscribe(),this.validChangesSubscription=T(...e).pipe(s(this.destroy$),_((()=>this.controlsChangeNotifyLock)),P((()=>this._noError()))).subscribe(this.setValid)},this.initControls(e),this.initBasicParams(this.getListValueFromControls(),t),this.resetGraph(),this.controlsChange.subscribe(this.updatePrivateControlsAndResetSubscribeGraph)}get controls(){return this._controls}get controlsChange(){return this.controlsSubject.asObservable().pipe(s(this.destroy$))}resetValueGraph(e){this.valueChangesSubscription&&this.valueChangesSubscription.unsubscribe(),this.valueChangesSubscription=T(...e).pipe(s(this.destroy$),_((()=>this.controlsChangeNotifyLock)),P((()=>this.getListValueFromControls()))).subscribe((e=>{this.valueSubject$.next(e)}))}}const Oe=e=>{const{children:t}=e,n=i.exports.useContext(be),{name:r,control:o}=(e=>void 0!==e.name)(e)?{name:e.name,control:n.get(e.name)}:{control:e.control};if(!(o instanceof Ne))throw new Error("props error:List can only receive ListControl as control");const l={name:r,disabled:ue(o),control:o,childControls:ve(o)};return p.createElement(be.Provider,{value:o},t(l))},Le=e=>{const{children:t}=e,n=i.exports.useContext(be),{name:r,control:o}=function(e){return void 0!==e.name}(e)?{name:e.name,control:n.get(e.name)}:{control:e.control},l=ue(o),a=Ee(o);return t({name:r,control:o,errors:de(o),disabled:l,valid:he(o),dirty:a})};const $e=e=>{return null==(t=e.value)||0===t.length?{required:!0}:null;var t},Be=()=>{const e=i.exports.useRef(new Pe({consignee:["Vick"],address:["No.1,Chaowai Street,Chaoyang District,Beijing City"]}));return i.exports.useEffect((()=>{const t=e.current.valueChange.subscribe((e=>{console.log("value changed",e)}));return()=>{t.unsubscribe()}}),[]),p.createElement(_e,{control:e.current},(t=>p.createElement(p.Fragment,null,p.createElement(ge,{name:"consignee"},(({value:e,setValue:t})=>p.createElement(h,{label:"consignee",variant:"outlined",value:e,onChange:e=>t(e.target.value)}))),p.createElement("br",null),p.createElement("br",null),p.createElement(ge,{name:"address"},(({value:e,setValue:t})=>p.createElement(h,{label:"address",variant:"outlined",multiline:!0,maxRows:14,value:e,onChange:e=>t(e.target.value)}))),p.createElement("br",null),p.createElement("br",null),p.createElement(N,{variant:"contained",color:"primary",onClick:()=>{console.log(e.current.value)}},"在控制台中打印数据"))))},De=()=>p.createElement("div",{className:"page"},p.createElement(C,{paragraph:!0,variant:"h2"},"群组"),p.createElement(C,{paragraph:!0},"我们用Group指代群组，它是由name为key，以其他controller为value组成的hash型数据源，一张表单往往就是一个Group。"),p.createElement(C,{paragraph:!0},'我们现在创建一个包含"consignee"，"address"两个参数的群组。过程和创建单一元素是很接近的。'),p.createElement(C,{paragraph:!0},'首先，我们创造一个GroupController，其中包含"consignee"，"address"两个key，我们为这两个属性赋予两个FieldController, GroupController会自动订阅下级的Controllers:'),p.createElement(Ae,null,'  const groupControlRef = useRef(\n    new GroupControl({\n      consignee: new FieldControl("vick"),\n      address: new FieldControl("No.1,Chaowai Street,Chaoyang District,Beijing City"),\n    })\n  );'),p.createElement(C,{paragraph:!0},"也可以采用简写形式:"),p.createElement(Ae,null,' const groupControlRef = useRef(\n    new GroupControl({\n      consignee: ["vick"],\n      address: ["No.1,Chaowai Street,Chaoyang District,Beijing City"],\n    })\n  );'),p.createElement(C,{paragraph:!0},"然后，利用","<Group/>","订阅GroupController"),p.createElement(Ae,null,"<Group control={groupControlRef.current}>\n    {(props) => {\n        return (\n          <>\n             //TODO\n          </>\n        );\n      }}\n</Group>"),p.createElement(C,{paragraph:!0},"至此Group的工作完成，接下来要将Group的Controller与视图关联。 由于本例中的Group包含的Controller均为FieldController， 我们采用","<Field/>","与其匹配，更复杂的例子可在",p.createElement(v,{to:"/"},"高级使用"),"中查看"),p.createElement(C,{paragraph:!0},"<Field/>","可以通过name可以匹配外部GroupController的下级Controller"),p.createElement(Ae,null,'<Group control={groupControlRef.current}>\n      {(props) => {\n        return (\n          <>\n            <Field name="consignee">\n              {({ value, setValue }) => {\n                return (\n                  <TextField\n                    label="consignee"\n                    variant="outlined"\n                    value={value}\n                    onChange={(e) => setValue(e.target.value)}\n                  />\n                );\n              }}\n            </Field>\n\n            <br />\n            <br />\n\n            <Field name="address">\n              {({ value, setValue }) => {\n                return (\n                  <TextField\n                    label="address"\n                    variant="outlined"\n                    multiline\n                    maxRows={14}\n                    value={value}\n                    onChange={(e) => setValue(e.target.value)}\n                  />\n                );\n              }}\n            </Field>\n          </>\n        );\n      }}\n    </Group>'),p.createElement(Ae,null,'<Field name="consignee"/> 相当于 <Field control="一个FieldController"/>'),p.createElement(C,{paragraph:!0},"<Field/>","完整例子如下"),p.createElement(je,{demo:p.createElement(Be,null),code:'import React, { useRef } from "react";\nimport { TextField } from "@material-ui/core";\nimport { Field, Group, GroupControl } from "react-observable-form";\n\nconst GroupDemo = () => {\n  // const groupControlRef = useRef(\n  //   new GroupControl({\n  //     consignee: new FieldControl("vick"),\n  //     address: new FieldControl("No.1,Chaowai Street,Chaoyang District,Beijing City"),\n  //   })\n  // );\n\n  const groupControlRef = useRef(\n    new GroupControl({\n      consignee: ["vick"],\n      address: ["No.1,Chaowai Street,Chaoyang District,Beijing City"],\n    })\n  );\n\n  return (\n    <Group control={groupControlRef.current}>\n      {(props) => {\n        return (\n          <>\n            <Field name="consignee">\n              {({ value, setValue }) => {\n                return (\n                  <TextField\n                    label="consignee"\n                    variant="outlined"\n                    value={value}\n                    onChange={(e) => setValue(e.target.value)}\n                  />\n                );\n              }}\n            </Field>\n\n            <Field name="address">\n              {({ value, setValue }) => {\n                return (\n                  <TextField\n                    label="address"\n                    variant="outlined"\n                    multiline\n                    maxRows={14}\n                    value={value}\n                    onChange={(e) => setValue(e.target.value)}\n                  />\n                );\n              }}\n            </Field>\n            <Button\n              variant="contained"\n              color={"primary"}\n              onClick={() => {\n                console.log(groupControlRef.current.value);\n              }}\n            >\n              打印数据\n            </Button>\n          </>\n        );\n      }}\n    </Group>\n  );\n};'}));const Ie=()=>{const e=i.exports.useRef(new Ne([["Vick"],["Tom"],["Jack"],["Lulu"]]));return p.createElement(p.Fragment,null,p.createElement("ul",{className:"list-demo__ul"},p.createElement(Oe,{control:e.current},(e=>{var o=e,{childControls:l}=o;((e,o)=>{var l={};for(var a in e)n.call(e,a)&&o.indexOf(a)<0&&(l[a]=e[a]);if(null!=e&&t)for(var a of t(e))o.indexOf(a)<0&&r.call(e,a)&&(l[a]=e[a])})(o,["childControls"]);return p.createElement(p.Fragment,null,l.map(((e,t)=>p.createElement("li",{key:`key${t}`},p.createElement(O,null,t+1),p.createElement(ge,{name:`${t}`},(({value:e,setValue:t})=>p.createElement(h,{label:"姓名",value:e,onChange:e=>t(e.target.value)})))))))}))),p.createElement(N,{variant:"contained",color:"primary",onClick:()=>{console.log(e.current.value)}},"在控制台中打印数据"))},qe=()=>p.createElement("div",{className:"page"},p.createElement(C,{paragraph:!0,variant:"h2"},"列表"),p.createElement(C,{paragraph:!0},"我们用List指代列表，与Group的用法很接近，它是由index为key，以其他controller为value组成的数组型数据源。"),p.createElement(C,{paragraph:!0},"我们直接用一个例子进行描述："),p.createElement(je,{demo:p.createElement(Ie,null),code:'import React, { useRef } from "react";\nimport { Avatar, Button, TextField } from "@material-ui/core";\nimport { Field,ListControl,List } from "react-observable-form";\nimport "./index.less";\n\nconst ListDemo = () => {\n  const controlRef = useRef(new ListControl([["Vick"], ["Tom"], ["Jack"], ["Lulu"]]));\n\n  return (\n    <>\n      <ul className="list-demo__ul">\n        <List control={controlRef.current}>\n          {({ controls, ...rest }) => {\n            return (\n              <>\n                {controls.map((control, i) => {\n                  return (\n                    <li key={`key${i}`}>\n                      <Avatar>{i + 1}</Avatar>\n                      <Field name={`${i}`}>\n                        {({ value, setValue }) => {\n                          return <TextField label="姓名" value={value} onChange={(e) => setValue(e.target.value)} />;\n                        }}\n                      </Field>\n                    </li>\n                  );\n                })}\n              </>\n            );\n          }}\n        </List>\n      </ul>\n\n      <Button\n        variant="contained"\n        color={"primary"}\n        onClick={() => {\n          console.log(controlRef.current.value);\n        }}\n      >\n        在控制台中打印数据\n      </Button>\n    </>\n  );\n};'})),We=()=>{const e=i.exports.useRef(new se("这是一条过长的姓名",{dirty:!0,validators:[$e,(t=4,e=>{return null!=(n=e.value)&&"number"==typeof n.length&&e.value.length>t?{maxlength:{requiredLength:t,actualLength:e.value.length}}:null;var n})]}));var t;return p.createElement(p.Fragment,null,p.createElement(ge,{control:e.current},(({value:e,setValue:t,dirty:n,errors:r})=>p.createElement(p.Fragment,null,p.createElement(h,{variant:"outlined",label:"姓名",error:Boolean(n&&r),value:e,onChange:e=>t(e.target.value)})))),p.createElement(Le,{control:e.current},(({dirty:e,errors:t})=>p.createElement(p.Fragment,null,e&&p.createElement(p.Fragment,null,(null==t?void 0:t.required)&&p.createElement(L,{error:!0},"请填写姓名"),(null==t?void 0:t.maxlength)&&p.createElement(L,{error:!0},"姓名不可大于",t.maxlength.requiredLength,"位，当前为",t.maxlength.actualLength,"位"))))))},Me=()=>p.createElement("div",{className:"page"},p.createElement(C,{paragraph:!0,variant:"h2"},"校验"),p.createElement(C,{paragraph:!0},"我们可以在初始化时通过validators参数为controller设计校验规则，也可以通过controller暴露的setValidators方法方法动态修改校验规则。 controller会根据validators的顺序依次进行校验，我们可以在",p.createElement(v,{to:"/"},"动态表单"),"中了解更多内容。"),p.createElement(C,{paragraph:!0},"validators接受一组符合ValidatorFn类型的方法，开发者可以由此定义校验规则，同时,react-observable-form也为开发者准备了一些常用的校验方法可供参考与是用,",p.createElement("a",null,"可在此处查看"),"。这部分实现大量的参考了@angular/core的forms模块。"),p.createElement(C,{paragraph:!0},"为了让不同类型组件职能更单纯，我们提供了专门的","<Errors/>","组件处理错误信息，也可以在其他任意的组件中消费错误，如下："),p.createElement(je,{demo:p.createElement(We,null),code:'import React, { useRef } from "react";\nimport { TextField, FormHelperText } from "@material-ui/core";\n\nimport { maxLengthValidator, requiredValidator } from "react-observable-form/validators";\nimport { Error,Field,FieldControl } from "react-observable-form";\n\nexport const ValidateDemo = () => {\n  const controlRef = useRef(\n    new FieldControl("这是一条过长的姓名", { dirty: true, validators: [requiredValidator, maxLengthValidator(4)] })\n  );\n\n  return (\n    <>\n      <Field control={controlRef.current}>\n        {({ value, setValue, dirty, errors }) => {\n          return (\n            <>\n              <TextField\n                variant="outlined"\n                label={"姓名"}\n                // 同样可以在<Field/>中消费errors\n                error={Boolean(dirty && errors)}\n                value={value}\n                onChange={(e) => setValue(e.target.value)}\n              />\n            </>\n          );\n        }}\n      </Field>\n      <Error control={controlRef.current}>\n        {({ dirty, errors }) => {\n          return (\n            <>\n              {dirty && (\n                <>\n                  {errors?.required && <FormHelperText error>请填写姓名</FormHelperText>}\n\n                  {errors?.maxlength && (\n                    <FormHelperText error>\n                      姓名不可大于{errors.maxlength.requiredLength}位，当前为{errors.maxlength.actualLength}位\n                    </FormHelperText>\n                  )}\n                </>\n              )}\n            </>\n          );\n        }}\n      </Error>\n    </>\n  );\n};'})),He=new Pe({married:["unmarried"],spouse:["",{disabled:!0}]}),Ue=He.get("married"),Je=He.get("spouse");Ue.valueChange.subscribe((e=>{"married"===e?Je.enable():(Je.setValue(""),Je.disable())}));const ze=()=>p.createElement(_e,{control:He},(()=>p.createElement(p.Fragment,null,p.createElement($,{component:"legend"},"婚姻状况"),p.createElement(ge,{name:"married"},(({value:e,setValue:t})=>p.createElement(p.Fragment,null,p.createElement(B,{value:e,onChange:e=>{t(e.target.value)}},p.createElement(D,{value:"unmarried",control:p.createElement(I,null),label:"未婚"}),p.createElement(D,{value:"married",control:p.createElement(I,null),label:"已婚"}))))),p.createElement("br",null),p.createElement(ge,{name:"spouse"},(({value:e,setValue:t,disabled:n})=>p.createElement(h,{label:"配偶姓名",disabled:n,value:e,onChange:e=>t(e.target.value)})))))),Ke=()=>p.createElement("div",{className:"page"},p.createElement(C,{paragraph:!0,variant:"h2"},"动态表单"),p.createElement(C,{paragraph:!0},"controller提供了大量的方法对对状态进行控制，我们可以通过调用这些方法实现动态表单效果。"),p.createElement(C,{paragraph:!0},"试想一个场景，我们设计一个婚姻状况的调查问卷。如果是已婚人士，需要填写配偶的姓名，否则清空配偶姓名栏目，并禁止输入。思路如下："),p.createElement(C,{paragraph:!0},"首先我们从GroupController中获取婚姻状况的FieldController，并订阅其变化。"),p.createElement(C,{paragraph:!0},"当发现婚姻状况变为未婚时，获取配偶姓名的FieldController。通过setValue方法将value清空，再通过disable将其禁用，反之，利用enable方法将其开放使用。效果如下："),p.createElement(je,{demo:p.createElement(ze,null),code:'import React from "react";\nimport { FormControlLabel, FormLabel, Radio, RadioGroup, TextField } from "@material-ui/core";\nimport { GroupControl,Field,Group } from "react-observable-form";\n\nconst group = new GroupControl({\n  married: ["unmarried"],\n  spouse: ["", { disabled: true }],\n});\n\nconst married = group.get("married");\nconst spouse = group.get("spouse");\n\nmarried.valueChange.subscribe((v) => {\n  if (v === "married") {\n    spouse.enable();\n  } else {\n    spouse.setValue("");\n    spouse.disable();\n  }\n});\n\nexport const DisableDemo = () => {\n  return (\n    <Group control={group}>\n      {() => {\n        return (\n          <>\n            <FormLabel component="legend">婚姻状况</FormLabel>\n            <Field name="married">\n              {({ value, setValue }) => {\n                return (\n                  <>\n                    <RadioGroup\n                      value={value}\n                      onChange={(e) => {\n                        setValue(e.target.value);\n                      }}\n                    >\n                      <FormControlLabel value="unmarried" control={<Radio />} label="未婚" />\n                      <FormControlLabel value="married" control={<Radio />} label="已婚" />\n                    </RadioGroup>\n                  </>\n                );\n              }}\n            </Field>\n\n            <br />\n\n            <Field name="spouse">\n              {({ value, setValue, disabled }) => {\n                return (\n                  <TextField\n                    label="配偶姓名"\n                    disabled={disabled}\n                    value={value}\n                    onChange={(e) => setValue(e.target.value)}\n                  />\n                );\n              }}\n            </Field>\n          </>\n        );\n      }}\n    </Group>\n  );\n};\n'})),Qe=()=>p.createElement("div",{className:"page"},p.createElement(C,{paragraph:!0,variant:"h2"},"订阅变化"),p.createElement(C,{paragraph:!0},"让开发者自由订阅表单状态变化是开发react-observable-form的初衷，react-observable-form使用Rxjs提供订阅功能。 开发者可以订阅value，disabled，dirty，errors，validate等等不同的状态变化并作出响应。 比如对表单元素进行操作，以达到动态表单的效果，再比如，表单某个值发生变化时实时发送请求。"),p.createElement(C,{paragraph:!0},"我们仍然以group为例，controller提供valueChange提供开发者进行对value变化的订阅。此处完全使用Rxjs的api， 如果你对Rxjs并不了解，也并不会影响你的使用。更多的可订阅对象请在",p.createElement(v,{to:"/"},"API"),"中了解。"),p.createElement(C,{paragraph:!0},"如果开发者觉得订阅valueChange很麻烦，建议自行封装hook简化逻辑，",p.createElement("b",null,"但是你一定要清楚Rxjs做了什么"),"。"),p.createElement(C,{paragraph:!0},"请打开控制台查看value变化："),p.createElement(je,{demo:p.createElement(Be,null),code:'import React, { useEffect, useRef } from "react";\nimport { Button, TextField } from "@material-ui/core";\n\nimport { Field, Group, GroupControl } from "react-observable-forms";\n\nconst GroupDemo = () => {\n  const groupControlRef = useRef(\n    new GroupControl({\n      consignee: ["Vick"],\n      address: ["No.1,Chaowai Street,Chaoyang District,Beijing City"],\n    })\n  );\n\n  useEffect(() => {\n    const subscription = groupControlRef.current.valueChange.subscribe((v) => {\n      console.log("value changed", v);\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  return (\n    <Group control={groupControlRef.current}>\n      {(props) => {\n        return (\n          <>\n            <Field name="consignee">\n              {({ value, setValue }) => {\n                return (\n                  <TextField\n                    label="consignee"\n                    variant="outlined"\n                    value={value}\n                    onChange={(e) => setValue(e.target.value)}\n                  />\n                );\n              }}\n            </Field>\n\n            <Field name="address">\n              {({ value, setValue }) => {\n                return (\n                  <TextField\n                    label="address"\n                    variant="outlined"\n                    multiline\n                    maxRows={14}\n                    value={value}\n                    onChange={(e) => setValue(e.target.value)}\n                  />\n                );\n              }}\n            </Field>\n\n            <Button\n              variant="contained"\n              color={"primary"}\n              onClick={() => {\n                console.log(groupControlRef.current.value);\n              }}\n            >\n              在控制台中打印数据\n            </Button>\n          </>\n        );\n      }}\n    </Group>\n  );\n};\n'})),Xe=()=>p.createElement("div",{className:"page"},p.createElement(C,{paragraph:!0,variant:"h2"},"更多选择"),p.createElement(C,{paragraph:!0},"React社区中还有非常多优秀作品值得关注："),p.createElement(C,{paragraph:!0},p.createElement("ul",null,p.createElement("li",null,p.createElement("a",{href:"https://www.react-hook-form.com"},"react-hook-form")),p.createElement("li",null,p.createElement("a",{href:"https://www.npmjs.com/package/react-final-form"},"react-final-form")),p.createElement("li",null,p.createElement("a",{href:"https://www.npmjs.com/package/formik"},"formik")),p.createElement("li",null,p.createElement("a",{href:"https://v2.formilyjs.org/"},"formily"))))),Ye=new Pe({passWord:["",{validators:[$e]}],confirmPassWord:["",{validators:[$e]}]},{validators:[e=>e.value.confirmPassWord===e.value.passWord?null:{confirmPassword:!0}]}),Ze=e=>{var t;return p.createElement(p.Fragment,null,e.dirty&&(null==(t=e.errors)?void 0:t.required)&&p.createElement(L,{error:!0},"必填项"))},et=()=>p.createElement(p.Fragment,null,p.createElement(_e,{control:Ye},(e=>p.createElement(p.Fragment,null,p.createElement(ge,{name:"passWord"},(({value:e,setValue:t})=>p.createElement(h,{label:"密码",variant:"outlined",value:e,onChange:e=>t(e.target.value)}))),p.createElement(Le,{name:"passWord"},Ze),p.createElement("br",null),p.createElement("br",null),p.createElement(ge,{name:"confirmPassWord"},(({value:e,setValue:t})=>p.createElement(h,{label:"再次确认密码",variant:"outlined",value:e,onChange:e=>t(e.target.value)}))),p.createElement(Le,{name:"confirmPassWord"},Ze)))),p.createElement(Le,{control:Ye},(e=>{var t;return p.createElement(p.Fragment,null,e.dirty&&(null==(t=e.errors)?void 0:t.confirmPassword)&&p.createElement(L,{error:!0},"两次密码不一致"))}))),tt=()=>p.createElement("div",{className:"page"},p.createElement(C,{paragraph:!0,variant:"h2"},"联合校验"),p.createElement(C,{paragraph:!0},"说一个经典的场景：注册账号的时候往往需要输入两次密码以免输入失误。当我两次输入的密码不一致的时候，是不能通过校验的。"),p.createElement(C,{paragraph:!0},"此时,第一条密码没有问题，第二条密码也没有问题，但是两条密码组合在一起就出错了。"),p.createElement(C,{paragraph:!0},"那么我们要在更上层的Group中对这两条密码进行校验。实现如下："),p.createElement(je,{demo:p.createElement(et,null),code:'import React from "react";\nimport { TextField, FormHelperText } from "@material-ui/core";\n\nimport { Error,ErrorInternalProps, Field, Group, GroupControl,ValidatorFn } from "react-observable-form";\nimport { requiredValidator } from "react-observable-form/validators";\n\ninterface FormValue {\n  passWord: string;\n  confirmPassWord: string;\n}\n\nconst confirmPasswordValidator: ValidatorFn<FormValue> = (control) => {\n  return control.value.confirmPassWord === control.value.passWord ? null : { confirmPassword: true };\n};\n\nconst formGroup = new GroupControl(\n  {\n    passWord: ["", { validators: [requiredValidator] }],\n    confirmPassWord: ["", { validators: [requiredValidator] }],\n  },\n  { validators: [confirmPasswordValidator] }\n);\n\nconst RequiredErrorMessage = (props: ErrorInternalProps) => (\n  <>{props.dirty && props.errors?.required && <FormHelperText error>{"必填项"}</FormHelperText>}</>\n);\n\nconst UnitValidateDemo = () => {\n  return (\n    <>\n      <Group control={formGroup}>\n        {(props) => {\n          return (\n            <>\n              <Field name="passWord">\n                {({ value, setValue }) => {\n                  return (\n                    <TextField\n                      label="密码"\n                      variant="outlined"\n                      value={value}\n                      onChange={(e) => setValue(e.target.value)}\n                    />\n                  );\n                }}\n              </Field>\n              <Error name="passWord">{RequiredErrorMessage}</Error>\n\n              <br />\n              <br />\n\n              <Field name="confirmPassWord">\n                {({ value, setValue }) => {\n                  return (\n                    <TextField\n                      label="再次确认密码"\n                      variant="outlined"\n                      value={value}\n                      onChange={(e) => setValue(e.target.value)}\n                    />\n                  );\n                }}\n              </Field>\n              <Error name="confirmPassWord">{RequiredErrorMessage}</Error>\n            </>\n          );\n        }}\n      </Group>\n\n      <Error control={formGroup}>\n        {(props) => (\n          <>{props.dirty && props.errors?.confirmPassword && <FormHelperText error>两次密码不一致</FormHelperText>}</>\n        )}\n      </Error>\n    </>\n  );\n};'}));const nt=()=>new Pe({name:[""],tel:[""]}),rt=()=>{const e=i.exports.useRef(new Pe({name:["",{validators:[$e]}],familyMembers:new Ne([nt()],{validators:[$e]})}));return p.createElement(p.Fragment,null,p.createElement(_e,{control:e.current},(t=>p.createElement(p.Fragment,null,p.createElement(C,{variant:"h6"},"本人："),p.createElement(ge,{name:"name"},(({value:e,setValue:t})=>p.createElement(h,{label:"本人姓名",value:e,onChange:e=>t(e.target.value)}))),p.createElement("br",null),p.createElement("br",null),p.createElement(C,{variant:"h6"},"家庭成员："),p.createElement(q,{component:W},p.createElement(M,null,p.createElement(H,null,p.createElement(U,null,p.createElement(J,null,"姓名"),p.createElement(J,null,"联系电话"),p.createElement(J,null,"操作"))),p.createElement(z,null,p.createElement(Oe,{name:"familyMembers"},(({childControls:t})=>p.createElement(p.Fragment,null,t.map(((t,n)=>p.createElement(_e,{name:`${n}`,key:`${n}`},(()=>p.createElement(U,null,p.createElement(J,null,p.createElement(ge,{name:"name"},(({value:e,setValue:t})=>p.createElement(h,{label:"姓名",value:e,onChange:e=>t(e.target.value)})))),p.createElement(J,null,p.createElement(ge,{name:"tel"},(({value:e,setValue:t})=>p.createElement(h,{label:"联系电话",value:e,onChange:e=>t(e.target.value)})))),p.createElement(J,null,p.createElement(N,{color:"primary",onClick:()=>{e.current.get("familyMembers").remove(n)}},"删除"))))))))))))),p.createElement(Le,{name:"familyMembers"},(({errors:e,dirty:t})=>p.createElement(p.Fragment,null,(null==e?void 0:e.required)&&p.createElement(L,{error:!0},"至少填一名家庭成员")))),p.createElement("br",null),p.createElement(N,{variant:"contained",color:"primary",onClick:()=>{e.current.get("familyMembers").push(nt())}},"加一名成员")))),p.createElement("br",null),p.createElement("br",null),p.createElement(N,{variant:"contained",color:"primary",onClick:()=>{console.log(e.current.value)}},"在控制台中打印数据"))},ot=()=>p.createElement("div",{className:"page"},p.createElement(C,{paragraph:!0,variant:"h2"},"复杂嵌套"),p.createElement(C,{paragraph:!0},"我们在基础使用中尝试过将Field嵌入Group与List，事实上不止Field，Group/List也可以作为Group/List的子Controller， 我们可以基于此作出更复杂的设计。"),p.createElement(C,{paragraph:!0},"试想一个场景：我们做一张统计家庭成员的表单，需要填写本人姓名，动态添加家庭成员，每个家庭成员需要填写姓名与联系电话。我们设计出如下的嵌套关系："),p.createElement("img",{src:"/react-observable-form/assets/nest.41279d1e.png",width:600}),p.createElement(C,{paragraph:!0},"实现如下："),p.createElement(je,{demo:p.createElement(rt,null),code:'import React, { useRef } from "react";\nimport { Button, FormHelperText, Table, TableBody, TableCell, TableHead, TableRow, TextField } from "@material-ui/core";\n\nimport { Error,List,Field,ListControl,GroupControl,Group } from "react-observable-form";\nimport { requiredValidator } from "react-observable-form/validators";\n\nconst createFamilyMemberGroup = () => {\n  return new GroupControl({\n    name: [""],\n    tel: [""],\n  });\n};\n\nconst NestedDemo = () => {\n  const fromGroupRef = useRef(\n    new GroupControl({\n      name: ["", { validators: [requiredValidator] }],\n      familyMembers: new ListControl([createFamilyMemberGroup()], {\n        validators: [requiredValidator],\n      }),\n    })\n  );\n\n  return (\n    <>\n      <Group control={fromGroupRef.current}>\n        {(v) => (\n          <>\n            <Field name="name">\n              {({ value, setValue }) => {\n                return <TextField label="本人姓名" value={value} onChange={(e) => setValue(e.target.value)} />;\n              }}\n            </Field>\n            <br />\n            <br />\n            家庭成员：\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>姓名</TableCell>\n                  <TableCell>联系电话</TableCell>\n                  <TableCell>操作</TableCell>\n                </TableRow>\n              </TableHead>\n\n              <TableBody>\n                <List name="familyMembers">\n                  {({ controls }) => {\n                    return (\n                      <>\n                        {controls.map((control, i) => {\n                          return (\n                            <Group name={`${i}`} key={`${i}`}>\n                              {() => {\n                                return (\n                                  <TableRow>\n                                    <TableCell>\n                                      <Field name="name">\n                                        {({ value, setValue }) => {\n                                          return (\n                                            <TextField\n                                              label="姓名"\n                                              value={value}\n                                              onChange={(e) => setValue(e.target.value)}\n                                            />\n                                          );\n                                        }}\n                                      </Field>\n                                    </TableCell>\n                                    <TableCell>\n                                      <Field name="tel">\n                                        {({ value, setValue }) => {\n                                          return (\n                                            <TextField\n                                              label="联系电话"\n                                              value={value}\n                                              onChange={(e) => setValue(e.target.value)}\n                                            />\n                                          );\n                                        }}\n                                      </Field>\n                                    </TableCell>\n                                    <TableCell>\n                                      <Button\n                                        color="primary"\n                                        onClick={() => {\n                                          fromGroupRef.current.get<ListControl>("familyMembers").remove(i);\n                                        }}\n                                      >\n                                        删除\n                                      </Button>\n                                    </TableCell>\n                                  </TableRow>\n                                );\n                              }}\n                            </Group>\n                          );\n                        })}\n                      </>\n                    );\n                  }}\n                </List>\n              </TableBody>\n            </Table>\n            <Error name="familyMembers">\n              {({ errors, dirty }) => (\n                <>{errors?.required && <FormHelperText error>至少填一名家庭成员</FormHelperText>}</>\n              )}\n            </Error>\n            <br />\n            <Button\n              variant="contained"\n              color="primary"\n              onClick={() => {\n                fromGroupRef.current.get<ListControl>("familyMembers").push(createFamilyMemberGroup());\n              }}\n            >\n              加一名成员\n            </Button>\n          </>\n        )}\n      </Group>\n      <br />\n      <br />\n      <Button\n        variant="contained"\n        color="primary"\n        onClick={() => {\n          console.log(fromGroupRef.current.value);\n        }}\n      >\n        在控制台中打印数据\n      </Button>\n    </>\n  );\n};\n\nexport default NestedDemo;\n'})),lt=()=>p.createElement("div",{className:"page"},p.createElement(C,{paragraph:!0,variant:"h2"},"与Rxjs"),p.createElement(C,{paragraph:!0},"Controller提供的每一个可订阅对象都是Rxjs提供的Subscription，我们可以使用Rxjs Operators协助处理数据流。"),p.createElement(C,{paragraph:!0},"举个例子，利用debounceTime对搜索框进行防抖处理，请在控制台中查看效果："),p.createElement(je,{demo:p.createElement(ye,null),code:'import React, { useEffect, useRef } from "react";\nimport { TextField } from "@material-ui/core";\nimport { debounceTime } from "rxjs/operators";\n\nconst UseRxjsDemo = () => {\n  const controlRef = useRef(new FieldControl<string>(""));\n\n  useEffect(() => {\n    const subscription = controlRef.current.valueChange.pipe(debounceTime(500)).subscribe((v) => {\n      console.log("value change", v);\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  return (\n    <Field control={controlRef.current}>\n      {({ value, setValue }) => {\n        return <TextField label="防抖500ms" value={value} onChange={(e) => setValue(e.target.value)} />;\n      }}\n    </Field>\n  );\n}'})),at=()=>p.createElement("div",{className:"page"},p.createElement(C,{paragraph:!0,variant:"h2"},"<Field<V> ...props/>"),p.createElement(C,{paragraph:!0,variant:"h4"},"props:","FieldProps<V>"),p.createElement(q,{component:W},p.createElement(M,null,p.createElement(H,null,p.createElement(U,null,p.createElement(J,null,"参数"),p.createElement(J,null,"说明"),p.createElement(J,null,"类型"),p.createElement(J,null,"必需"),p.createElement(J,null,"默认"))),p.createElement(z,null,p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"name"),p.createElement(J,{component:"th",scope:"row"},"字段名，与control互斥"),p.createElement(J,{component:"th",scope:"row"},"string"),p.createElement(J,{component:"th",scope:"row"},"否"),p.createElement(J,{component:"th",scope:"row"},"-")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"control"),p.createElement(J,{component:"th",scope:"row"},"绑定的controller，与name互斥"),p.createElement(J,{component:"th",scope:"row"},"FieldControl<V = any>"),p.createElement(J,{component:"th",scope:"row"},"否"),p.createElement(J,{component:"th",scope:"row"},"-")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"children"),p.createElement(J,{component:"th",scope:"row"},"内容"),p.createElement(J,{component:"th",scope:"row"},"(props: ",p.createElement("a",{href:"#fieldInternalProps"},"FieldInternalProps<V>"),") ","=>"," ReactElement"),p.createElement(J,{component:"th",scope:"row"},"是"),p.createElement(J,{component:"th",scope:"row"},"-"))))),p.createElement("br",null),p.createElement(C,{paragraph:!0,variant:"h4",id:"fieldInternalProps"},"FieldInternalProps<V>"),p.createElement(q,{component:W},p.createElement(M,null,p.createElement(H,null,p.createElement(U,null,p.createElement(J,null,"参数"),p.createElement(J,null,"说明"),p.createElement(J,null,"类型"))),p.createElement(z,null,p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"name"),p.createElement(J,{component:"th",scope:"row"},"字段名"),p.createElement(J,{component:"th",scope:"row"},"string?")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"value"),p.createElement(J,{component:"th",scope:"row"},"值"),p.createElement(J,{component:"th",scope:"row"},"<V>")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"setValue"),p.createElement(J,{component:"th",scope:"row"},"更新值"),p.createElement(J,{component:"th",scope:"row"},'FieldControl<V>["setValue"]')),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"markAsDirty"),p.createElement(J,{component:"th",scope:"row"},"标记值未被修改过"),p.createElement(J,{component:"th",scope:"row"},'FieldControl<V>["markAsDirty"]')),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"markAsPristine"),p.createElement(J,{component:"th",scope:"row"},"标记值被修改过"),p.createElement(J,{component:"th",scope:"row"},'FieldControl<V>["markAsPristine"]')),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"pristine"),p.createElement(J,{component:"th",scope:"row"},"值未被修改过"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"dirty"),p.createElement(J,{component:"th",scope:"row"},"值被修改过"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"disabled"),p.createElement(J,{component:"th",scope:"row"},"被禁用"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"enabled"),p.createElement(J,{component:"th",scope:"row"},"未被禁用"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"valid"),p.createElement(J,{component:"th",scope:"row"},"通过校验"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"invalid"),p.createElement(J,{component:"th",scope:"row"},"未通过校验"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"errors"),p.createElement(J,{component:"th",scope:"row"},"错误描述"),p.createElement(J,{component:"th",scope:"row"},"{[key: string]: any}  |  null")))))),ct=()=>p.createElement("div",{className:"page"},p.createElement(C,{paragraph:!0,variant:"h2"},"<Group ...props/>"),p.createElement(C,{paragraph:!0,variant:"h4"},"props:","GroupProps"),p.createElement(q,{component:W},p.createElement(M,null,p.createElement(H,null,p.createElement(U,null,p.createElement(J,null,"参数"),p.createElement(J,null,"说明"),p.createElement(J,null,"类型"),p.createElement(J,null,"必需"),p.createElement(J,null,"默认"))),p.createElement(z,null,p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"name"),p.createElement(J,{component:"th",scope:"row"},"字段名，与control互斥"),p.createElement(J,{component:"th",scope:"row"},"string"),p.createElement(J,{component:"th",scope:"row"},"否"),p.createElement(J,{component:"th",scope:"row"},"-")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"control"),p.createElement(J,{component:"th",scope:"row"},"绑定的controller，与name互斥"),p.createElement(J,{component:"th",scope:"row"},"GroupControl"),p.createElement(J,{component:"th",scope:"row"},"否"),p.createElement(J,{component:"th",scope:"row"},"-")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"children"),p.createElement(J,{component:"th",scope:"row"},"内容"),p.createElement(J,{component:"th",scope:"row"},"(props: ",p.createElement("a",{href:"#GroupInternalProps"},"GroupInternalProps"),") ","=>"," ReactElement"),p.createElement(J,{component:"th",scope:"row"},"是"),p.createElement(J,{component:"th",scope:"row"},"-"))))),p.createElement("br",null),p.createElement(C,{paragraph:!0,variant:"h4",id:"GroupInternalProps"},"GroupInternalProps"),p.createElement(q,{component:W},p.createElement(M,null,p.createElement(H,null,p.createElement(U,null,p.createElement(J,null,"参数"),p.createElement(J,null,"说明"),p.createElement(J,null,"类型"))),p.createElement(z,null,p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"name"),p.createElement(J,{component:"th",scope:"row"},"字段名"),p.createElement(J,{component:"th",scope:"row"},"string?")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"value"),p.createElement(J,{component:"th",scope:"row"},"值"),p.createElement(J,{component:"th",scope:"row"},"Record<string, any>")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"pristine"),p.createElement(J,{component:"th",scope:"row"},"值未被修改过"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"dirty"),p.createElement(J,{component:"th",scope:"row"},"值被修改过"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"disabled"),p.createElement(J,{component:"th",scope:"row"},"被禁用"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"enabled"),p.createElement(J,{component:"th",scope:"row"},"未被禁用"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"valid"),p.createElement(J,{component:"th",scope:"row"},"通过校验"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"invalid"),p.createElement(J,{component:"th",scope:"row"},"未通过校验"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"errors"),p.createElement(J,{component:"th",scope:"row"},"错误描述"),p.createElement(J,{component:"th",scope:"row"},"{[key: string]: any}  |  null")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"controls"),p.createElement(J,{component:"th",scope:"row"},"子controller集合"),p.createElement(J,{component:"th",scope:"row"},"{\n  [key: string]: AbstractControl<any>;\n}")))))),st=()=>p.createElement("div",{className:"page"},p.createElement(C,{paragraph:!0,variant:"h2"},"<List ...props/>"),p.createElement(C,{paragraph:!0,variant:"h4"},"props:","ListProps"),p.createElement(q,{component:W},p.createElement(M,null,p.createElement(H,null,p.createElement(U,null,p.createElement(J,null,"参数"),p.createElement(J,null,"说明"),p.createElement(J,null,"类型"),p.createElement(J,null,"必需"),p.createElement(J,null,"默认"))),p.createElement(z,null,p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"name"),p.createElement(J,{component:"th",scope:"row"},"字段名，与control互斥"),p.createElement(J,{component:"th",scope:"row"},"string"),p.createElement(J,{component:"th",scope:"row"},"否"),p.createElement(J,{component:"th",scope:"row"},"-")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"control"),p.createElement(J,{component:"th",scope:"row"},"绑定的controller，与name互斥"),p.createElement(J,{component:"th",scope:"row"},"ListControl"),p.createElement(J,{component:"th",scope:"row"},"否"),p.createElement(J,{component:"th",scope:"row"},"-")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"children"),p.createElement(J,{component:"th",scope:"row"},"内容"),p.createElement(J,{component:"th",scope:"row"},"(props: ",p.createElement("a",{href:"#ListInternalProps"},"ListInternalProps"),") ","=>"," ReactElement"),p.createElement(J,{component:"th",scope:"row"},"是"),p.createElement(J,{component:"th",scope:"row"},"-"))))),p.createElement("br",null),p.createElement(C,{paragraph:!0,variant:"h4",id:"ListInternalProps"},"ListInternalProps"),p.createElement(q,{component:W},p.createElement(M,null,p.createElement(H,null,p.createElement(U,null,p.createElement(J,null,"参数"),p.createElement(J,null,"说明"),p.createElement(J,null,"类型"))),p.createElement(z,null,p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"name"),p.createElement(J,{component:"th",scope:"row"},"字段名"),p.createElement(J,{component:"th",scope:"row"},"string?")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"value"),p.createElement(J,{component:"th",scope:"row"},"值"),p.createElement(J,{component:"th",scope:"row"},"Record<string, any>")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"pristine"),p.createElement(J,{component:"th",scope:"row"},"值未被修改过"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"dirty"),p.createElement(J,{component:"th",scope:"row"},"值被修改过"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"disabled"),p.createElement(J,{component:"th",scope:"row"},"被禁用"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"enabled"),p.createElement(J,{component:"th",scope:"row"},"未被禁用"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"valid"),p.createElement(J,{component:"th",scope:"row"},"通过校验"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"invalid"),p.createElement(J,{component:"th",scope:"row"},"未通过校验"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"errors"),p.createElement(J,{component:"th",scope:"row"},"错误描述"),p.createElement(J,{component:"th",scope:"row"},"{[key: string]: any}  |  null")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"controls"),p.createElement(J,{component:"th",scope:"row"},"子controller集合"),p.createElement(J,{component:"th",scope:"row"},"AbstractControl<any>[]")))))),mt=()=>p.createElement("div",{className:"page"},p.createElement(C,{paragraph:!0,variant:"h2"},"<Error<V> ...props/>"),p.createElement(C,{paragraph:!0,variant:"h4"},"props:","FieldProps<V>"),p.createElement(q,{component:W},p.createElement(M,null,p.createElement(H,null,p.createElement(U,null,p.createElement(J,null,"参数"),p.createElement(J,null,"说明"),p.createElement(J,null,"类型"),p.createElement(J,null,"必需"),p.createElement(J,null,"默认"))),p.createElement(z,null,p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"name"),p.createElement(J,{component:"th",scope:"row"},"字段名，与control互斥"),p.createElement(J,{component:"th",scope:"row"},"string"),p.createElement(J,{component:"th",scope:"row"},"否"),p.createElement(J,{component:"th",scope:"row"},"-")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"control"),p.createElement(J,{component:"th",scope:"row"},"绑定的controller，与name互斥"),p.createElement(J,{component:"th",scope:"row"},"FieldControl<V = any>"),p.createElement(J,{component:"th",scope:"row"},"否"),p.createElement(J,{component:"th",scope:"row"},"-")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"children"),p.createElement(J,{component:"th",scope:"row"},"内容"),p.createElement(J,{component:"th",scope:"row"},"(props: ",p.createElement("a",{href:"#ErrorInternalProps"},"ErrorInternalProps"),") ","=>"," ReactElement"),p.createElement(J,{component:"th",scope:"row"},"是"),p.createElement(J,{component:"th",scope:"row"},"-"))))),p.createElement("br",null),p.createElement(C,{paragraph:!0,variant:"h4",id:"ErrorInternalProps"},"ErrorInternalProps"),p.createElement(q,{component:W},p.createElement(M,null,p.createElement(H,null,p.createElement(U,null,p.createElement(J,null,"参数"),p.createElement(J,null,"说明"),p.createElement(J,null,"类型"))),p.createElement(z,null,p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"name"),p.createElement(J,{component:"th",scope:"row"},"字段名"),p.createElement(J,{component:"th",scope:"row"},"string?")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"pristine"),p.createElement(J,{component:"th",scope:"row"},"值未被修改过"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"dirty"),p.createElement(J,{component:"th",scope:"row"},"值被修改过"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"errors"),p.createElement(J,{component:"th",scope:"row"},"错误描述"),p.createElement(J,{component:"th",scope:"row"},"{[key: string]: any}  |  null")))))),it=()=>p.createElement("div",{className:"page"},p.createElement(C,{paragraph:!0,variant:"h2"},"Class FieldControl<V>"),p.createElement(C,{paragraph:!0,variant:"h4"},"Constructor"),p.createElement(C,{paragraph:!0,variant:"h4"},"属性"),p.createElement(q,{component:W},p.createElement(M,null,p.createElement(H,null,p.createElement(U,null,p.createElement(J,null,"参数"),p.createElement(J,null,"说明"),p.createElement(J,null,"类型"))),p.createElement(z,null,p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"value"),p.createElement(J,{component:"th",scope:"row"},"（只读）值"),p.createElement(J,{component:"th",scope:"row"},"<V>")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"errors"),p.createElement(J,{component:"th",scope:"row"},"（只读）错误"),p.createElement(J,{component:"th",scope:"row"},"{[key: string]: any} | null")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"valid"),p.createElement(J,{component:"th",scope:"row"},"（只读）校验通过"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"invalid"),p.createElement(J,{component:"th",scope:"row"},"（只读）校验未通过"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"disabled"),p.createElement(J,{component:"th",scope:"row"},"（只读）禁用"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"enabled"),p.createElement(J,{component:"th",scope:"row"},"（只读）可用"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"dirty"),p.createElement(J,{component:"th",scope:"row"},"（只读）被污染过"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"pristine"),p.createElement(J,{component:"th",scope:"row"},"（只读）未被污染过"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"valueChange"),p.createElement(J,{component:"th",scope:"row"},"（只读）订阅值变化的可订阅对象"),p.createElement(J,{component:"th",scope:"row"},"Observable<V>")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"errorsChange"),p.createElement(J,{component:"th",scope:"row"},"（只读）订阅错误变化的可订阅对象"),p.createElement(J,{component:"th",scope:"row"},"Observable<{[key: string]: any} | null>")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"disabledChange"),p.createElement(J,{component:"th",scope:"row"},"（只读）订阅禁用状态变化的可订阅对象"),p.createElement(J,{component:"th",scope:"row"},"Observable<boolean>")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"dirtyChange"),p.createElement(J,{component:"th",scope:"row"},"（只读）订阅污染状态变化的可订阅对象"),p.createElement(J,{component:"th",scope:"row"},"Observable<boolean>")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"validChange"),p.createElement(J,{component:"th",scope:"row"},"（只读）订阅校验状态变化的可订阅对象"),p.createElement(J,{component:"th",scope:"row"},"Observable<boolean>")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"setValue"),p.createElement(J,{component:"th",scope:"row"},"更新值"),p.createElement(J,{component:"th",scope:"row"},"(value:V)=>void")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"setErrors"),p.createElement(J,{component:"th",scope:"row"},"更新错误"),p.createElement(J,{component:"th",scope:"row"},"(value:{[key: string]: any} | null)=>void")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"setValidators"),p.createElement(J,{component:"th",scope:"row"},"更新校验规则"),p.createElement(J,{component:"th",scope:"row"},"(validators:ValidatorFn[])=>void")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"disable"),p.createElement(J,{component:"th",scope:"row"},"设置为禁用"),p.createElement(J,{component:"th",scope:"row"},"()=>void")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"enable"),p.createElement(J,{component:"th",scope:"row"},"设置为未禁用"),p.createElement(J,{component:"th",scope:"row"},"()=>void")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"setValid"),p.createElement(J,{component:"th",scope:"row"},"更新校验状态的方法"),p.createElement(J,{component:"th",scope:"row"},"(valid:boolean)=>void")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"markAsDirty"),p.createElement(J,{component:"th",scope:"row"},"更新为被污染的方法"),p.createElement(J,{component:"th",scope:"row"},"()=>void")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"markAsPristine"),p.createElement(J,{component:"th",scope:"row"},"更新未被污染的方法"),p.createElement(J,{component:"th",scope:"row"},"()=>void")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"reset"),p.createElement(J,{component:"th",scope:"row"},"重置值"),p.createElement(J,{component:"th",scope:"row"},"()=>void")))))),pt=e=>"wrong"===e.value?Promise.resolve({asyncError:!0}):Promise.resolve(null),ut=()=>{const e=i.exports.useRef(new se("",{validators:[$e],asyncValidators:[pt]}));return p.createElement(ge,{control:e.current},(({value:e,setValue:t,valid:n,errors:r,asyncErrors:o})=>p.createElement(p.Fragment,null,p.createElement(h,{label:"name",value:e,onChange:e=>t(e.target.value)}),p.createElement("br",null),"valid: ",JSON.stringify(n),p.createElement("br",null),"errors:",JSON.stringify(r),p.createElement("br",null),"asyncErrors:",JSON.stringify(o))))},Et=()=>p.createElement("div",{className:"page"},p.createElement(C,{paragraph:!0,variant:"h2"},"Class GroupControl"),p.createElement(C,{paragraph:!0,variant:"h4"},"Constructor"),p.createElement(C,{paragraph:!0,variant:"h4"},"属性"),p.createElement(q,{component:W},p.createElement(M,null,p.createElement(H,null,p.createElement(U,null,p.createElement(J,null,"参数"),p.createElement(J,null,"说明"),p.createElement(J,null,"类型"))),p.createElement(z,null,p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"value"),p.createElement(J,{component:"th",scope:"row"},"（只读）值"),p.createElement(J,{component:"th",scope:"row"},"{[key: string]: any}")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"controls"),p.createElement(J,{component:"th",scope:"row"},"（只读）子controller集合"),p.createElement(J,{component:"th",scope:"row"},"{[key: string]: AbstractControl<any>}")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"errors"),p.createElement(J,{component:"th",scope:"row"},"（只读）错误"),p.createElement(J,{component:"th",scope:"row"},"{[key: string]: any} | null")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"valid"),p.createElement(J,{component:"th",scope:"row"},"（只读）校验通过"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"invalid"),p.createElement(J,{component:"th",scope:"row"},"（只读）校验未通过"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"disabled"),p.createElement(J,{component:"th",scope:"row"},"（只读）禁用"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"enabled"),p.createElement(J,{component:"th",scope:"row"},"（只读）可用"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"dirty"),p.createElement(J,{component:"th",scope:"row"},"（只读）被污染过"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"pristine"),p.createElement(J,{component:"th",scope:"row"},"（只读）未被污染过"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"valueChange"),p.createElement(J,{component:"th",scope:"row"},"（只读）订阅值变化的可订阅对象"),p.createElement(J,{component:"th",scope:"row"},"Observable<{[key: string]: any}>")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"errorsChange"),p.createElement(J,{component:"th",scope:"row"},"（只读）订阅错误变化的可订阅对象"),p.createElement(J,{component:"th",scope:"row"},"Observable<{[key: string]: any} | null>")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"disabledChange"),p.createElement(J,{component:"th",scope:"row"},"（只读）订阅禁用状态变化的可订阅对象"),p.createElement(J,{component:"th",scope:"row"},"Observable<boolean>")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"dirtyChange"),p.createElement(J,{component:"th",scope:"row"},"（只读）订阅污染状态变化的可订阅对象"),p.createElement(J,{component:"th",scope:"row"},"Observable<boolean>")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"validChange"),p.createElement(J,{component:"th",scope:"row"},"（只读）订阅校验状态变化的可订阅对象"),p.createElement(J,{component:"th",scope:"row"},"Observable<boolean>")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"controlsChange"),p.createElement(J,{component:"th",scope:"row"},"（只读）订阅子controllers变化的可订阅对象"),p.createElement(J,{component:"th",scope:"row"},"Observable<{[key: string]: AbstractControl<any>}>")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"setValue"),p.createElement(J,{component:"th",scope:"row"},"更新值"),p.createElement(J,{component:"th",scope:"row"},"(value:{[key: string]: any})=>void")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"setErrors"),p.createElement(J,{component:"th",scope:"row"},"更新错误"),p.createElement(J,{component:"th",scope:"row"},"(value:{[key: string]: any} | null)=>void")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"setValidators"),p.createElement(J,{component:"th",scope:"row"},"更新校验规则"),p.createElement(J,{component:"th",scope:"row"},"(validators:ValidatorFn[])=>void")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"disable"),p.createElement(J,{component:"th",scope:"row"},"设置为禁用"),p.createElement(J,{component:"th",scope:"row"},"()=>void")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"enable"),p.createElement(J,{component:"th",scope:"row"},"设置为未禁用"),p.createElement(J,{component:"th",scope:"row"},"()=>void")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"setValid"),p.createElement(J,{component:"th",scope:"row"},"更新校验状态的方法"),p.createElement(J,{component:"th",scope:"row"},"(valid:boolean)=>void")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"markAsDirty"),p.createElement(J,{component:"th",scope:"row"},"更新为被污染的方法"),p.createElement(J,{component:"th",scope:"row"},"()=>void")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"markAsPristine"),p.createElement(J,{component:"th",scope:"row"},"更新未被污染的方法"),p.createElement(J,{component:"th",scope:"row"},"()=>void")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"reset"),p.createElement(J,{component:"th",scope:"row"},"重置值"),p.createElement(J,{component:"th",scope:"row"},"()=>void")))))),ht=()=>p.createElement("div",{className:"page"},p.createElement(C,{paragraph:!0,variant:"h2"},"Class ListControl"),p.createElement(C,{paragraph:!0,variant:"h4"},"Constructor"),p.createElement(C,{paragraph:!0,variant:"h4"},"属性"),p.createElement(q,{component:W},p.createElement(M,null,p.createElement(H,null,p.createElement(U,null,p.createElement(J,null,"参数"),p.createElement(J,null,"说明"),p.createElement(J,null,"类型"))),p.createElement(z,null,p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"value"),p.createElement(J,{component:"th",scope:"row"},"（只读）值"),p.createElement(J,{component:"th",scope:"row"},"any[]")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"controls"),p.createElement(J,{component:"th",scope:"row"},"（只读）子controller集合"),p.createElement(J,{component:"th",scope:"row"},"AbstractControl<any>[]")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"errors"),p.createElement(J,{component:"th",scope:"row"},"（只读）错误"),p.createElement(J,{component:"th",scope:"row"},"{[key: string]: any} | null")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"valid"),p.createElement(J,{component:"th",scope:"row"},"（只读）校验通过"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"invalid"),p.createElement(J,{component:"th",scope:"row"},"（只读）校验未通过"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"disabled"),p.createElement(J,{component:"th",scope:"row"},"（只读）禁用"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"enabled"),p.createElement(J,{component:"th",scope:"row"},"（只读）可用"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"dirty"),p.createElement(J,{component:"th",scope:"row"},"（只读）被污染过"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"pristine"),p.createElement(J,{component:"th",scope:"row"},"（只读）未被污染过"),p.createElement(J,{component:"th",scope:"row"},"boolean")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"valueChange"),p.createElement(J,{component:"th",scope:"row"},"（只读）订阅值变化的可订阅对象"),p.createElement(J,{component:"th",scope:"row"},"Observable<{[key: string]: any}>")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"errorsChange"),p.createElement(J,{component:"th",scope:"row"},"（只读）订阅错误变化的可订阅对象"),p.createElement(J,{component:"th",scope:"row"},"Observable<{[key: string]: any} | null>")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"disabledChange"),p.createElement(J,{component:"th",scope:"row"},"（只读）订阅禁用状态变化的可订阅对象"),p.createElement(J,{component:"th",scope:"row"},"Observable<boolean>")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"dirtyChange"),p.createElement(J,{component:"th",scope:"row"},"（只读）订阅污染状态变化的可订阅对象"),p.createElement(J,{component:"th",scope:"row"},"Observable<boolean>")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"validChange"),p.createElement(J,{component:"th",scope:"row"},"（只读）订阅校验状态变化的可订阅对象"),p.createElement(J,{component:"th",scope:"row"},"Observable<boolean>")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"controlsChange"),p.createElement(J,{component:"th",scope:"row"},"（只读）订阅子controllers变化的可订阅对象"),p.createElement(J,{component:"th",scope:"row"},"Observable<AbstractControl<any>[]>")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"setValue"),p.createElement(J,{component:"th",scope:"row"},"更新值"),p.createElement(J,{component:"th",scope:"row"},"(value:any[])=>void")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"setErrors"),p.createElement(J,{component:"th",scope:"row"},"更新错误"),p.createElement(J,{component:"th",scope:"row"},"(value:{[key: string]: any} | null)=>void")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"setValidators"),p.createElement(J,{component:"th",scope:"row"},"更新校验规则"),p.createElement(J,{component:"th",scope:"row"},"(validators:ValidatorFn[])=>void")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"disable"),p.createElement(J,{component:"th",scope:"row"},"设置为禁用"),p.createElement(J,{component:"th",scope:"row"},"()=>void")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"enable"),p.createElement(J,{component:"th",scope:"row"},"设置为未禁用"),p.createElement(J,{component:"th",scope:"row"},"()=>void")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"setValid"),p.createElement(J,{component:"th",scope:"row"},"更新校验状态的方法"),p.createElement(J,{component:"th",scope:"row"},"(valid:boolean)=>void")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"markAsDirty"),p.createElement(J,{component:"th",scope:"row"},"更新为被污染的方法"),p.createElement(J,{component:"th",scope:"row"},"()=>void")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"markAsPristine"),p.createElement(J,{component:"th",scope:"row"},"更新未被污染的方法"),p.createElement(J,{component:"th",scope:"row"},"()=>void")),p.createElement(U,null,p.createElement(J,{component:"th",scope:"row"},"reset"),p.createElement(J,{component:"th",scope:"row"},"重置值"),p.createElement(J,{component:"th",scope:"row"},"()=>void"))))));const dt=e=>new Promise((t=>{setTimeout((()=>{"existed"===e.value?t({existed:!0}):t(null)}),2e3)})),vt=()=>{const e=i.exports.useRef(new se("",{validators:[$e],asyncValidators:[dt],autoAsyncValidate:!1,autoMarkAsDirty:!1})),t=he(e.current);return p.createElement(p.Fragment,null,p.createElement(ge,{control:e.current},(({value:e,setValue:t,markAsDirty:n,asyncValidateAndUpdateErrors:r,valid:o,dirty:l})=>p.createElement(h,{label:"username",value:e,onChange:e=>t(e.target.value),onBlur:e=>{n(),r()},InputProps:{endAdornment:p.createElement(K,{position:"end"},p.createElement(p.Fragment,null,"pending"===o&&p.createElement(Q,{className:"pending-icon"}),l&&!0===o&&p.createElement(X,{className:"success-icon"}),l&&!1===o&&p.createElement(Y,{className:"failed-icon"})))}}))),p.createElement("div",null,p.createElement(N,{disabled:!1===t,onClick:()=>{const t=()=>{console.log("提交成功",{username:n.value})},n=e.current;!0===n.valid&&t(),"pending"===n.valid&&n.validChange.pipe(Z(1)).subscribe((e=>{e&&t()}))},color:"primary",variant:"contained"},"submit")))},bt=()=>p.createElement("div",{className:"page"},p.createElement(C,{paragraph:!0,variant:"h2"},"异步校验"),p.createElement(C,{paragraph:!0},"试想一个常见场景，当我们想要在某平台注册注册一个账号,我们要求的账号唯一性。此时我们需要在提交注册之前发起一个请求校验账号是否已被占用。 这时我们就用到了异步校验功能。"),p.createElement(C,{paragraph:!0},"我们为control绑定一组asyncValidators作为异步校验规则，也许是要到调用某一个接口。当接口返回并且通过校验再进行下一步操作，案例如下："),p.createElement(je,{demo:p.createElement(vt,null),code:'import React, { useRef } from "react";\nimport { InputAdornment, TextField, Button } from "@material-ui/core";\nimport { Sync, CheckCircle, ErrorOutline } from "@material-ui/icons";\nimport { take } from "rxjs/operators";\n\nimport "./index.less";\nimport { FieldControl, Field,AsyncValidatorFn,useControlValid } from "react-observable-form";\nimport { requiredValidator } from "react-observable-form/validators";\n\nconst asyncValidator: AsyncValidatorFn<string> = (control) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      if (control.value === "existed") {\n        resolve({ existed: true });\n      } else {\n        resolve(null);\n      }\n    }, 2000);\n  });\n};\n\nexport const AsyncValidateUsername = () => {\n  const controlRef = useRef(\n    new FieldControl<string>("", {\n      validators: [requiredValidator],\n      asyncValidators: [asyncValidator],\n      autoAsyncValidate: false,\n      autoMarkAsDirty: false,\n    })\n  );\n\n  const valid = useControlValid(controlRef.current);\n\n  const onSubmit = () => {\n    const handleSubmit = () => {\n      // eslint-disable-next-line no-console\n      console.log("提交成功", {\n        username: usernameControl.value,\n      });\n    };\n\n    const usernameControl = controlRef.current;\n\n    if (usernameControl.valid === true) {\n      handleSubmit();\n    }\n\n    if (usernameControl.valid === "pending") {\n      usernameControl.validChange.pipe(take(1)).subscribe((valid) => {\n        if (valid) {\n          handleSubmit();\n        }\n      });\n    }\n  };\n\n  return (\n    <>\n      <Field control={controlRef.current}>\n        {({ value, setValue, markAsDirty, asyncValidateAndUpdateErrors, valid, dirty }) => {\n          return (\n            <TextField\n              label="username"\n              value={value}\n              onChange={(e) => setValue(e.target.value)}\n              onBlur={(e) => {\n                markAsDirty();\n                asyncValidateAndUpdateErrors();\n              }}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position="end">\n                    <>\n                      {valid === "pending" && <Sync className={"pending-icon"} />}\n                      {dirty && valid === true && <CheckCircle className={"success-icon"} />}\n                      {dirty && valid === false && <ErrorOutline className={"failed-icon"} />}\n                    </>\n                  </InputAdornment>\n                ),\n              }}\n            />\n          );\n        }}\n      </Field>\n\n      <div>\n        <Button disabled={valid === false} onClick={onSubmit}>\n          submit\n        </Button>\n      </div>\n    </>\n  );\n};\n'}));function gt(){const e=ee();return p.createElement("div",{className:"App"},"/"!==e.pathname&&p.createElement(Ge,null),p.createElement("div",{className:"content"},p.createElement(te,null,p.createElement(ne,{exact:!0,path:"/",component:fe}),p.createElement(ne,{path:"/quick-start",component:Fe}),p.createElement(ne,{path:"/core",component:Se}),p.createElement(ne,{path:"/field",component:Te}),p.createElement(ne,{path:"/group",component:De}),p.createElement(ne,{path:"/list",component:qe}),p.createElement(ne,{path:"/validate",component:Me}),p.createElement(ne,{path:"/subscribe",component:Qe}),p.createElement(ne,{path:"/dynamic",component:Ke}),p.createElement(ne,{path:"/resources",component:Xe}),p.createElement(ne,{path:"/uniteValidate",component:tt}),p.createElement(ne,{path:"/nest",component:ot}),p.createElement(ne,{path:"/asyncValidate",component:bt}),p.createElement(ne,{path:"/useRx",component:lt}),p.createElement(ne,{path:"/fieldApi",component:at}),p.createElement(ne,{path:"/groupApi",component:ct}),p.createElement(ne,{path:"/listApi",component:st}),p.createElement(ne,{path:"/errorApi",component:mt}),p.createElement(ne,{path:"/fieldControlApi",component:it}),p.createElement(ne,{path:"/groupControlApi",component:Et}),p.createElement(ne,{path:"/listControlApi",component:ht}),p.createElement(ne,{path:"/playGround",component:ut}))))}const wt=re({palette:{primary:{main:"#4c00b7"},secondary:{main:"#4c00b7"}},typography:{h2:{color:"#4c00b7",fontWeight:100,fontSize:42},h4:{fontWeight:100},body1:{fontWeight:100,textIndent:32}}});oe.render(p.createElement(le,{theme:wt},p.createElement(ae,{basename:"/react-observable-form"},p.createElement(gt,null))),document.getElementById("root"));
