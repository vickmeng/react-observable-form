import { Subject } from "rxjs";
import { Errors, IControlBasicParams, IGroupValue, Validator } from "../types/control";
export declare abstract class AbstractControl<T> {
    get value(): T;
    get errors(): Errors | null;
    get valid(): boolean;
    get invalid(): boolean;
    get enabled(): boolean;
    get disabled(): boolean;
    get valueChange(): import("rxjs").Observable<any>;
    get errorsChange(): import("rxjs").Observable<Errors | null>;
    get enabledChange(): import("rxjs").Observable<boolean>;
    get validChange(): import("rxjs").Observable<boolean>;
    abstract setValue(value: any, options?: Object): void;
    protected abstract checkValid(): boolean;
    protected _value: T;
    protected _errors: Errors | null;
    protected _enabled: boolean;
    protected _valid: boolean;
    protected _validators: Validator[];
    protected valueSubject$: Subject<any>;
    protected enabledSubject$: Subject<boolean>;
    protected validSubject$: Subject<boolean>;
    protected errorsSubject$: Subject<Errors | null>;
    protected destroy$: Subject<true>;
    protected initBasicParams({ value, disabled, validators }: IControlBasicParams<T>): void;
    destroy: () => void;
    setErrors: (errors: Errors | null) => void;
    setValidators: (validators: Validator[]) => void;
    disable: () => void;
    enable: () => void;
    setValid: (valid: boolean) => void;
    protected initValue: (value: T) => void;
    protected initEnabled: (enabled: boolean) => void;
    protected initErrors: (errors: Errors | null) => void;
    protected initValid: (valid: boolean) => void;
    protected initValidators: (validators: Validator[]) => void;
    protected updatePrivateValue: (value: T) => void;
    protected updatePrivateValid: (valid: boolean) => void;
    protected updatePrivateErrors: (errors: Errors | null) => void;
    protected updatePrivateEnabledStatus: (enabled: boolean) => void;
    protected validateAndUpdateErrors: (value: IGroupValue) => void;
    private setEnabled;
}
